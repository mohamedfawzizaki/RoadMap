_________________________________________________________________________________________________________________________________________________________________________
                                               `authorized_keys`
                                              ===================  

The `authorized_keys` file is used by the SSH server (`sshd`) to
 control access to a user account through public key authentication.
It contains a list of public keys that are authorized to connect to the SSH server for a specific user account.

-------------------------------------------------------------------------------------------------------------------------------
Location

The file is located in the `~/.ssh`
 directory of the user’s home folder on the SSH server.
 For example:

      ````````````````````````````````````bash
      /home/username/.ssh/authorized_keys
      ````````````````````````````````````

-------------------------------------------------------------------------------------------------------------------------------
Purpose

When a client tries to log in using SSH with a private key, the server
 checks the `authorized_keys` file in the user’s home directory to see if the corresponding public key is listed.

If the public key matches one in the file, the server allows access without prompting for a password.

-------------------------------------------------------------------------------------------------------------------------------
Format of `authorized_keys`

Each line in the `authorized_keys` file represents a single public key.
A public key consists of:

1.Key Type  
   - Common key types:
      - `ssh-rsa` – RSA key
      - `ecdsa-sha2-nistp256` – ECDSA key
      - `ssh-ed25519` – Ed25519 key

2.Key Body  
   The long string of characters representing the actual public key.

3.Key Comment (Optional)  
   A human-readable comment, often used to identify the key (e.g., the key owner’s email or machine name).

Example line in `authorized_keys`:

   ````````````````````````````````````bash
   ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEArpjz...XvY6 user@hostname
   ````````````````````````````````````

-------------------------------------------------------------------------------------------------------------------------------
Adding a Public Key to `authorized_keys`

1.Generate an SSH key pair on the client (if not already generated):

      ````````````````````````````````````bash
      ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
      ````````````````````````````````````

      This creates two files:
      - `id_rsa` (private key)
      - `id_rsa.pub` (public key)

2.Copy the public key to the remote server:

      Use the `ssh-copy-id` command to automatically copy the public key to the `authorized_keys` file:

      ````````````````````````````````````bash
      ssh-copy-id user@remote_server
      ````````````````````````````````````

      Alternatively, manually append the contents of `id_rsa.pub` to `~/.ssh/authorized_keys` on the server:

      ````````````````````````````````````bash
      cat ~/.ssh/id_rsa.pub | ssh user@remote_server "mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys"
      ````````````````````````````````````

-------------------------------------------------------------------------------------------------------------------------------
Example `authorized_keys` File

      ````````````````````````````````````bash
      ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEArpjz...XvY6 user@hostname
      ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICIb...9VmX other@device
      ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTIt...d9sj WorkLaptop
      ````````````````````````````````````

-------------------------------------------------------------------------------------------------------------------------------
Permissions of `authorized_keys`

It’s important that the permissions on the `authorized_keys` file and
 its parent directories are properly set to ensure security.
SSH will refuse to use the file if the permissions are too open.

- Directory permissions:
  ````````````````````````````````````bash
  chmod 700 ~/.ssh
  ````````````````````````````````````

- File permissions:
  ````````````````````````````````````bash
  chmod 600 ~/.ssh/authorized_keys
  ````````````````````````````````````

-------------------------------------------------------------------------------------------------------------------------------
Restricting Access with Options

You can add restrictions or options before the key in the `authorized_keys` file to control how the key can be used.
These options are specified before the key type and are comma-separated.

 Common Options
 _______________________________________________________________________________________________________________________________________________________________
| Option                     | Description                                                                    | Example                                                                                      
|____________________________|________________________________________________________________________________|_________________________________________________
| `command="cmd"`            | Runs a specific command upon login, instead of providing a normal shell.       | `command="/usr/local/bin/backup.sh"`            
| `no-agent-forwarding`      | Disables SSH agent forwarding for this key.                                    | `no-agent-forwarding ssh-rsa AAAAB3...`         
| `no-port-forwarding`       | Disables port forwarding for this key.                                         | `no-port-forwarding ssh-ed25519 AAAAC3...`      
| `no-pty`                   | Prevents allocation of a pseudo-terminal.                                      | `no-pty ssh-rsa AAAAB3...`                      
| `from="IP_or_hostname"`    | Restricts the key to be used only from a specific IP address or hostname.      | `from="192.168.1.100" ssh-rsa AAAAB3...`        
| `environment="VAR=VAL"`    | Specifies environment variables to be set when using the key.                  | `environment="BACKUP_MODE=1" ssh-rsa AAAAB3...` 
| `permitopen="host:port"`   | Restricts port forwarding to a specific host and port (useful for tunneling).  | `permitopen="example.com:22" ssh-rsa AAAAB3...` 
| `expiry-time="YYYY-MM-DD"` | Specifies the expiration date for the key (not universally supported).         | `expiry-time="2025-12-31" ssh-ed25519 AAAAC3...`
|____________________________|________________________________________________________________________________|_________________________________________________

-------------------------------------------------------------------------------------------------------------------------------
Example with Restrictions

````````````````````````````````````bash
from="192.168.1.100",no-pty,no-agent-forwarding ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEArpjz...XvY6 user@hostname
````````````````````````````````````

This key can only be used from the IP `192.168.1.100`, will not allocate a terminal, and will not allow agent forwarding.

-------------------------------------------------------------------------------------------------------------------------------
Best Practices

1.Limit key usage by adding restrictions where necessary (e.g., use `from`, `no-port-forwarding`).
2.Remove unused keys regularly from the `authorized_keys` file.
3.Use key comments to identify keys easily.
4.Use different keys for different devices or purposes, so they can be revoked individually if compromised.
5.Use passphrases when generating keys for added security.
6.Rotate keys periodically, especially for critical systems.
7.Audit the file regularly to ensure only trusted keys are present.
_________________________________________________________________________________________________________________________________________________________________________
