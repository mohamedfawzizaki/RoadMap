______________________________________________________________________________________________________________________________________
                                                    Encryption and decryption
                                                    =========================
Encryption and decryption are techniques used to secure data,
 ensuring it can only be accessed or understood by authorized parties.
 
These techniques transform plaintext (readable data) into ciphertext (unreadable data)
 using an encryption algorithm, and the reverse process retrieves the plaintext using decryption.

______________________________________________________________________________________________________________________________________
                                                   Types of Encryption
1.Symmetric Encryption:
            - Uses the same key for both encryption and decryption.
            - Examples: AES, DES, 3DES.
            - Fast and efficient but requires secure key distribution.

2.Asymmetric Encryption:
            - Uses a pair of keys: a public key for encryption and a private key for decryption.
            - Examples: RSA, ECC.
            - Ideal for secure communication but computationally slower.

______________________________________________________________________________________________________________________________________
                                                   Encryption in Linux with Examples

# 1.Symmetric Encryption with `openssl`
Encrypt a file:
            ```````````````````````````````````````````````````````````````````````bash
            openssl enc -aes-256-cbc -salt -in file.txt -out file.txt.enc -k PASSWORD
            ```````````````````````````````````````````````````````````````````````

Decrypt the file:
            ```````````````````````````````````````````````````````````````````````bash
            openssl enc -aes-256-cbc -d -in file.txt.enc -out file.txt -k PASSWORD
            ```````````````````````````````````````````````````````````````````````

- Options:
            - `-aes-256-cbc`: Specifies the AES encryption algorithm with a 256-bit key in CBC mode.
            - `-salt`: Adds random data to the encryption process for security.
            - `-k PASSWORD`: Specifies the encryption/decryption password.

______________________________________________________________________________________________________________________________________

# 2.Asymmetric Encryption with `gpg` (GNU Privacy Guard)

Encrypt a file (for someone with a public key):
            ```````````````````````````````````````````````````````````````````````bash
            gpg --output file.gpg --encrypt --recipient recipient_email@example.com file.txt
            ```````````````````````````````````````````````````````````````````````

Decrypt the file:
            ```````````````````````````````````````````````````````````````````````bash
            gpg --output file.txt --decrypt file.gpg
            ```````````````````````````````````````````````````````````````````````

- Options:
            - `--encrypt`: Encrypts the file.
            - `--recipient`: Specifies the public key recipient.
            - `--decrypt`: Decrypts the file.
            - `--output`: Specifies the output file.

______________________________________________________________________________________________________________________________________

# 3.Password-Based Encryption with `openssl`

Encrypt a string:
            ```````````````````````````````````````````````````````````````````````bash
            echo "Hello, World!" | openssl enc -aes-256-cbc -salt -k PASSWORD -base64
            ```````````````````````````````````````````````````````````````````````

Decrypt the string:
            ```````````````````````````````````````````````````````````````````````bash
            echo "ENCRYPTED_STRING" | openssl enc -aes-256-cbc -d -k PASSWORD -base64
            ```````````````````````````````````````````````````````````````````````

______________________________________________________________________________________________________________________________________
                                                  Encryption in Programming

# Encryption with PHP
Using OpenSSL:
            ```````````````````````````````````````````````````````````````````````php
            <?php
            $data = "Secret message";
            $key = "password";

            // Encrypt
            $encrypted = openssl_encrypt($data, 'AES-256-CBC', $key, 0, str_repeat('0', 16));
            echo "Encrypted: $encrypted\n";

            // Decrypt
            $decrypted = openssl_decrypt($encrypted, 'AES-256-CBC', $key, 0, str_repeat('0', 16));
            echo "Decrypted: $decrypted\n";
            ?>
            ```````````````````````````````````````````````````````````````````````

______________________________________________________________________________________________________________________________________
                                                      Best Practices
1.Use Strong Keys:
            - For symmetric encryption, use randomly generated keys.
            - For asymmetric encryption, use a key size of at least 2048 bits (RSA).

2.Secure Key Management:
            - Store keys securely, such as in an HSM (Hardware Security Module) or using tools like HashiCorp Vault.

3.Use Modern Algorithms:
            - Avoid deprecated algorithms like DES or MD5.
            - Use AES, RSA, or ECC for robust security.

4.Add Salt and Initialization Vector (IV):
            - Salting prevents identical plaintexts from producing identical ciphertexts.
            - IV ensures that repeated encryption with the same key produces different ciphertexts.

5.Encrypt Sensitive Data Only:
            - Focus on encrypting sensitive data like passwords, PII, or proprietary information.

______________________________________________________________________________________________________________________________________