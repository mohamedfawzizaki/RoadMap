_________________________________________________________________________________________________________________________________________________________________________
                                                 Job Scheduling
                                               =================== 
Linux provides multiple tools for scheduling and managing jobs to automate tasks at specific times.
These include at, cron, and anacron for time-based scheduling,
 and batch or systemd timers for event-driven or load-aware scheduling.

_________________________________________________________________________________________________________________________________________________________________________
                                        1.Types of Job Schedulers in Linux
                                        ==================================

a.Cron Jobs
        Cron jobs are used to schedule repetitive tasks (hourly, daily, weekly, etc.).

        - Tool: `cron`
        - File: `crontab` (user-specific cron table)

        Use cases:
        - Daily backups
        - System maintenance tasks
        - Log rotation

-------------------------------------------------------------------------------------------------------------------------------

 b.At Jobs
        At jobs schedule a one-time task to be executed at a specific time in the future.

        - Tool: `at`
        - Service: `atd` (at daemon)

        Example usage:
                ```````````````````````````````````bash
                # Schedule a job to run at 2:30 PM
                echo "bash /path/to/script.sh" | at 14:30
                ```````````````````````````````````

-------------------------------------------------------------------------------------------------------------------------------
c.Anacron Jobs

        Anacron is designed for systems that don't run 24/7.Unlike `cron`,
         it ensures that jobs are run even if the system was off when they were originally scheduled.

        - Tool: `anacron`
        - Files: `/etc/anacrontab`, `/etc/cron.daily`, `/etc/cron.weekly`, `/etc/cron.monthly`

        Use cases:
                - Laptop or desktop systems that may not be powered on at scheduled times
                - Ensuring important periodic tasks are never missed

-------------------------------------------------------------------------------------------------------------------------------
d.Batch Jobs
        
        Batch jobs run tasks when system load permits.
        They are queued and executed by the system when it's less busy.

        - Tool: `batch`

        Example:
                `````````````````````````````````````````````bash
                echo "bash /path/to/heavy-script.sh" | batch
                `````````````````````````````````````````````

-------------------------------------------------------------------------------------------------------------------------------
e.Systemd Timers

        Systemd provides an alternative to `cron` through systemd timers,
         offering more flexibility in scheduling and logging.

        - Tool: `systemctl`, `systemd-timer`
        - Files: `.timer` and `.service` unit files

        Advantages:
                - Fine-grained control over job execution
                - Native integration with system logs (`journalctl`)

        Example `.timer` file:
                ```````````````````````````````````ini
                [Unit]
                Description=Run backup script every day

                [Timer]
                OnCalendar=*-*-* 02:00:00
                Persistent=true

                [Install]
                WantedBy=timers.target
                ```````````````````````````````````

_________________________________________________________________________________________________________________________________________________________________________
                                        2.Using Cron for Repetitive Tasks
                                        ==================================

Viewing Scheduled Cron Jobs
        ```````````````````````````````````bash
        crontab -l
        ```````````````````````````````````

Editing Cron Jobs
        ```````````````````````````````````bash
        crontab -e
        ```````````````````````````````````
------------------------------------------------------------------------------------------------------
Cron Job Syntax:

        A cron job consists of five fields:
        ```````````````````````````````````bash
        *  *  *  *  * /path/to/command
        -  -  -  -  -
        |  |  |  |  |
        |  |  |  |  +---- Day of the week (0-7, where both 0 and 7 = Sunday)
        |  |  |  +------- Month (1-12)
        |  |  +---------- Day of the month (1-31)
        |  +------------- Hour (0-23)
        +---------------- Minute (0-59)
        ```````````````````````````````````

Example:
        ```````````````````````````````````bash
        Run a script at 5 AM every day
        0 5 * * * /path/to/script.sh
        ```````````````````````````````````
------------------------------------------------------------------------------------------------------

_________________________________________________________________________________________________________________________________________________________________________
                                            3.Using At for One-Time Tasks
                                            =============================

Install `at`
        ```````````````````````````````````bash
        sudo apt install at
        sudo systemctl enable --now atd
        ```````````````````````````````````

Schedule a Job Using `at`
        ```````````````````````````````````bash
        echo "bash /path/to/command.sh" | at now + 2 hours
        ```````````````````````````````````

View Scheduled `at` Jobs
        ```````````````````````````````````bash
        atq
        ```````````````````````````````````

Remove a Scheduled `at` Job
        ```````````````````````````````````bash
        atrm <job-id>
        ```````````````````````````````````

_________________________________________________________________________________________________________________________________________________________________________
                                        4.Using Anacron for Non-24/7 Systems
                                        ====================================

Anacron works by specifying job intervals in days.
It runs jobs after the system boots if they were missed.

Anacron Syntax
        The file `/etc/anacrontab` defines jobs for `anacron`:

                ```````````````````````````````````bash
                period delay job-identifier command
                ```````````````````````````````````

        - period: Interval in days (`1` = daily, `7` = weekly, `30` = monthly)
        - delay: Delay in minutes before execution
        - job-identifier: Unique name for the job
        - command: Command or script to run

        Example (`/etc/anacrontab`):
                ```````````````````````````````````bash
                1 5 cron.daily run-parts /etc/cron.daily
                7 10 cron.weekly run-parts /etc/cron.weekly
                30 15 cron.monthly run-parts /etc/cron.monthly
                ```````````````````````````````````

_________________________________________________________________________________________________________________________________________________________________________
                                        5.Using Batch for Load-Aware Tasks
                                        ==================================

Batch jobs are queued and executed when the
 system load average drops below a certain threshold.

Schedule a Batch Job
        ```````````````````````````````````bash
        echo "bash /path/to/heavy-task.sh" | batch
        ```````````````````````````````````

View Batch Queue
        ```````````````````````````````````bash
        atq
        ```````````````````````````````````

_________________________________________________________________________________________________________________________________________________________________________
                                                6.Using Systemd Timers
                                                ======================
Create a Timer and Service

1.Create a Service File (`/etc/systemd/system/my-task.service`):
        ```````````````````````````````````ini
        [Unit]
        Description=My periodic task

        [Service]
        ExecStart=/path/to/script.sh
        ```````````````````````````````````

2.Create a Timer File (`/etc/systemd/system/my-task.timer`):
        ```````````````````````````````````ini
        [Unit]
        Description=Timer for my periodic task

        [Timer]
        OnCalendar=*-*-* 03:00:00
        Persistent=true

        [Install]
        WantedBy=timers.target
        ```````````````````````````````````

3.Enable and Start the Timer:
        ```````````````````````````````````bash
        sudo systemctl enable --now my-task.timer
        ```````````````````````````````````

4.Check Timer Status:
        ```````````````````````````````````bash
        systemctl list-timers
        ```````````````````````````````````

-------------------------------------------------------------------------------------------------------------------------------
 _____________________________________________________________________________________________________
|     Tool         |             Purpose                        |              Best for               |
|__________________|____________________________________________|_____________________________________|
| `cron`           | Schedule repetitive tasks                  | Servers running 24/7                |
| `at`             | Schedule one-time tasks                    | One-off tasks at specific times     |
| `anacron`        | Schedule repetitive tasks with flexibility | Systems not running 24/7            |
| `batch`          | Schedule tasks based on load               | Heavy tasks when system is idle     |
| `systemd timers` | Advanced scheduling with systemd           | Fine-grained control and logging    |
|__________________|____________________________________________|_____________________________________|

_________________________________________________________________________________________________________________________________________________________________________
