______________________________________________________________________________________________________________________________________
                                                            Vim 
                                                            ===

Vim (Vi IMproved) is a highly configurable and efficient text editor for Unix-based systems.
It is an enhanced version of the original `vi` editor,
 with many features added to improve usability and extend functionality.
Vim is known for its powerful editing capabilities, speed, and flexibility, especially in programming and scripting tasks.


                                             vim [option] <script-name>
             ________________________________________________________________________________________________________
            |     Option     |                Description                          |          Example                |
            |________________|_____________________________________________________|_________________________________|
            | `-r`           | Recover a crashed session using a swap file.        | `vim -r script.sh`              |
            | `-R`           | Open file in read-only mode (cannot edit).          | `vim -R script.sh`              |
            | `-o`           | Open multiple files in horizontal splits.           | `vim -o file1 file2`            |
            | `-O`           | Open multiple files in vertical splits.             | `vim -O file1 file2`            |
            | `-b`           | Open file in binary mode.                           | `vim -b binaryfile`             |
            | `-m`           | Disable file modifications (like view-only mode)    | `vim -m script.sh`              |
            | `-y`           | Start Vim in easy mode (simplified interface).      | `vim -y script.sh`              |
            | `-x`           | Encrypt a file while saving.                        | `vim -x secrets.txt`            |
            | `-d`           | Open files in diff mode to compare changes.         | `vim -d file1 file2`            |
            | `-n`           | Disable swap file creation (useful for temp edits). | `vim -n temp.txt`               |
            | `-e`           | Start Vim in Ex mode (command-line editing).        | `vim -e`                        |
            |----------------|-----------------------------------------------------|---------------------------------|
            | `-u filename`  | Use a specific vimrc configuration file.            | `vim -u myvimrc`                |
            | `-c 'command'` | Run a Vim command after opening a file.             | `vim -c 'set number' script.sh` |
            | `-s script`    | Execute a script file inside Vim.                   | `vim -s commands.vim script.sh` |
            | `-M`           | Open file in strongly read-only mode (even `:w` is disabled). | `vim -M script.sh`    |
            |________________|_____________________________________________________|_________________________________|
---------------------------------------------------------------------------------------------------------
Key Features of Vim

1.Modes: Vim operates in different modes, each designed for specific tasks.
      - Normal  Mode : The default mode where you navigate and execute commands.
                       - Command Mode : For executing commands like saving, quitting, searching, etc.
                       - Visual  Mode : Used to select text for copy, cut, and paste operations.
      - Insert  Mode : The mode for inserting and editing text.

2.Keyboard Shortcuts: 
      - Vim makes extensive use of keyboard shortcuts for efficient navigation and editing.
      - Once learned, these shortcuts enable fast and productive editing without taking hands off the keyboard.

3.Extensibility:
      - Vim is highly extensible through plugins and customization.
      - There are numerous plugins available to enhance features such as 
        syntax highlighting, autocompletion, version control integration, and more.

4.Search and Replace: 
      - Vim provides advanced searching and replacing features, including regular expression support.
      - Search: `/pattern` to search forward, `?pattern` to search backward.
      - Replace: `:%s/old/new/g` to replace all occurrences of `old` with `new` in the file.

5.Undo and Redo: 
      - Vim supports multiple levels of undo and redo operations.
      - Undo: Press `u` to undo the last change.
      - Redo: Press `Ctrl + r` to redo the undone change.

6.Syntax Highlighting: 
      - Vim supports syntax highlighting for various programming languages, making it easier to read and write code.

7.Customization: 
      - Vim can be customized using the `.vimrc` configuration file.
      - This file allows users to set preferences for behavior, key mappings, color schemes, and plugins.
---------------------------------------------------------------------------------------------------------
Vim Modes

1.Normal Mode (Navigation and Command Mode):
      - The default mode when you open Vim.
      - In this mode, you can navigate the document, delete or copy text, search, and more.
      - Example commands:
           - `dd` : Delete the current line
           - `yy` : Copy the current line
           - `p`  : Paste the copied text
           - `gg` : Go to the beginning of the document.
           - `G`  : Go to the end of the document.

           - `h`: Move left
           - `j`: Move down
           - `k`: Move up
           - `l`: Move right

2.Insert Mode (Editing Mode):
      - Press `i` to enter Insert Mode, where you can type text directly into the document.
      - Press `Esc` to return to Normal Mode.
      - Common commands:
           - `i`: Insert before the cursor
           - `I`: Insert at the beginning of the line
           - `a`: Append after the cursor
           - `A`: Append at the end of the line
           - `o`: Open a new line below the current one
           - `O`: Open a new line above the current one

3.Command Mode (Ex Mode):
      - In Normal Mode, type `:` to enter Command Mode.
      - Command Mode allows you to execute commands for saving, quitting, searching, and more.
      - Example commands:
           - `:w`              : Save the file
           - `:w fileName`     : Save the file
           - `:q`              : Quit Vim
           - `:wq`             : Save and quit
           - `:x`              : Save and quit (same as `:wq`)
           - `:set nu`         : Show line numbers
           - `:help`           : Open the Vim help system

4.Visual Mode (Text Selection):
      - Used to select text for copying, cutting, or other operations.
      - Press `v` to start selecting text character by character.
      - Press `V` to select entire lines.
      - Press `Ctrl + v` to select a block of text.
      - Once text is selected, you can cut or copy it:
         - `y`: Copy (yank) the selection
         - `d`: Cut (delete) the selection
         - `p`: Paste the selection
---------------------------------------------------------------------------------------------------------
Common Vim Commands

1.Navigation:
      - `h`: Move left by one character.
      - `j`: Move down by one line.
      - `k`: Move up by one line.
      - `l`: Move right by one character.
      - `w`: Move to the beginning of the next word.
      - `b`: Move to the beginning of the previous word.
      - `gg`: Go to the beginning of the document.
      - `G` : Go to the end of the document.

2.Editing:
      - `i`      : Enter Insert Mode before the cursor.
      - `a`      : Enter Insert Mode after the cursor.
      - `o`      : Open a new line below the current line.
      - `dd`     : Delete the current line.
      - `yy`     : Copy the current line.
      - `p`      : Paste the copied text.
      - `r<char>`: Replace the current character with `<char>`.

3.Searching:
      - `/pattern`      : Search for `pattern` forward in the file.
      - `?pattern`      : Search for `pattern` backward in the file.
      - `n`             : Move to the next occurrence of the search pattern.
      - `N`             : Move to the previous occurrence of the search pattern.

4.Undo/Redo:
      - `u`             : Undo the last change.
      - `Ctrl + r`      : Redo the undone change.

5.Saving and Quitting:
      - `:w`            : Save the file.
      - `:q`            : Quit Vim.
      - `:wq`           : Save and quit.
      - `:x`            : Save and quit (same as `:wq`).
      - `ZZ`            : Save and quit (same as `:wq`).

6.Other:
      - `:set nu`       : Show line numbers.
      - `:set nonu`     : Hide line numbers.
      - `:syntax on`    : Enable syntax highlighting.
      - `:syntax off`   : Disable syntax highlighting.
---------------------------------------------------------------------------------------------------------
Vim Configuration (`~/.vimrc`)

Vim can be customized using the `.vimrc` configuration file,
 which allows users to set preferences, mappings, and enable plugins.
Some common settings include:

- Enable line numbers:
  ```vim
  
  
  ```
- Set auto-indentation:
  ```vim
  set smartindent
  set tabstop=4
  set shiftwidth=4
  set expandtab
  ```
- Enable line wrapping:
  ```vim
  set wrap
  ```
- Enable syntax highlighting:
  ```vim
  syntax enable
  ```
---------------------------------------------------------------------------------------------------------
Vim Plugins

visudo :   {/etc/sudoers} -> This file MUST be edited with the 'visudo' command as root.

Vim has a rich ecosystem of plugins for extending its functionality.
Some popular plugins include:

      1.NERDTree     : A file explorer for navigating directories.
      2.vim-airline  : A status bar with useful information.
      3.YouCompleteMe: Code completion plugin.
      4.Fugitive     : Git integration for Vim.

Plugins can be installed using a plugin manager like Vundle, Pathogen, or vim-plug.
---------------------------------------------------------------------------------------------------------
Conclusion

Vim is a powerful text editor with a steep learning curve but great benefits once mastered.
It’s widely used for coding, system administration, and general text editing in Linux environments.
With its unique modes, keyboard-centric operations, and vast customizability,
 Vim allows users to edit text at incredible speed and efficiency.
______________________________________________________________________________________________________________________________________
