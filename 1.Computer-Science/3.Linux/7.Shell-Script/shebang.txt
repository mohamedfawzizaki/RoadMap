____________________________________________________________________________________________________________________________________________________________
                                                          Shebang
                                                        ============
the `#!/bin/bash` line at the beginning of a script is called a shebang. 
It specifies the interpreter to be used when executing the script. 
In this case, `bash` (the Bourne Again Shell) is the specified interpreter.  

________________________________________________________________________________________________________________________________
                                                    How the Shebang Works
                                                    =====================
- The `#!` indicates to the operating system that the file is a script and specifies the path to the interpreter.
- When you run the script directly (e.g., `./script.sh`),
  the system looks at the shebang line to determine which program should execute the script.

________________________________________________________________________________________________________________________________
                                                Common Variants of the Shebang
                                                ===============================
 ___________________________________________________________________________________________________________________
|          Shebang        |             Interpreter              |               Description                        |
|_________________________|______________________________________|__________________________________________________|
| `#!/bin/bash`           | Bash Shell                           | Most common for Bash scripts.                    |
| `#!/bin/sh`             | Bourne Shell                         | Legacy scripts or for POSIX-compliant scripting. |
| `#!/usr/bin/env bash`   | Environment-Specific Bash            | Uses the `env` command to find Bash in the `PATH`|
| `#!/usr/bin/python3`    | Python Interpreter                   | For Python scripts.                              |
| `#!/usr/bin/env python` | Environment-Specific Python          | Finds Python in the `PATH`.                      |
| `#!/usr/bin/perl`       | Perl Interpreter                     | For Perl scripts.                                |
|_________________________|______________________________________|__________________________________________________|

________________________________________________________________________________________________________________________________
                                                     Why Use the Shebang?
                                                     ====================
1. Script Portability: 
      - Ensures the script runs with the intended interpreter, regardless of the default shell on the system.
2. Clarity: 
      - Indicates the script's intended use (e.g., Bash, Python).
3. Ease of Execution: 
      - Allows running the script directly as `./script.sh` instead of explicitly invoking the interpreter (e.g., `bash script.sh`).

________________________________________________________________________________________________________________________________
                                                  Behavior Without a Shebang
                                                  ==========================
- If no shebang is present, the script is executed by the user's current shell.
  - Example: If you're using `zsh`, the script will run in `zsh` instead of `bash`.
- To avoid unintentional behavior, always include a shebang in your script.

________________________________________________________________________________________________________________________________
                                                        Best Practices
                                                        ==============
- Use `#!/bin/bash` if you're certain `bash` is located at `/bin/bash`.
- Use `#!/usr/bin/env bash` for better portability,
  especially across systems where `bash` might be located in a non-standard location.

________________________________________________________________________________________________________________________________
                                                        Example Script
                                                        ==============

script.sh
      ``````````````````````````````````````````bash
      #!/bin/bash
      echo "This script is running with Bash!"
      ``````````````````````````````````````````

Make the Script Executable
      ``````````````````````````````````````````bash
      chmod +x script.sh
      ``````````````````````````````````````````

Run the Script
      ``````````````````````````````````````````bash
      ./script.sh
      ``````````````````````````````````````````

Output:
      ``````````````````````````````````````````
      This script is running with Bash!
      ``````````````````````````````````````````
      ________________________________________________________________________________________________________________________________