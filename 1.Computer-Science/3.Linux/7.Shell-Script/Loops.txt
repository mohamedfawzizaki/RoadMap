____________________________________________________________________________________________________________________________________________________________
                                                         Loops
                                                        ======= 
Loops in shell scripting are used to execute a block of code multiple times. 
They are essential for automating repetitive tasks. 
Shell scripting supports various types of loops, including `for`, `while`, and `until`.

Items:

1. `for` loop: 
                - This loop is used to iterate over a list of items. 
                - It can be used to iterate over arrays, strings, and other data types.
2. `while` loop: 
                
                - This loop is used to execute a block of code as long as a certain condition is met. 
                - It can be used to iterate over a list of items 
                  or to execute a block of code repeatedly until a certain condition is met.
3. `until` loop: 
                - This loop is used to execute a block of code until a certain condition is met.
                - It is similar to the `while` loop but with a different syntax.
________________________________________________________________________________________________________________________________
                                                       Types of Loops
                                                       ==============

1. For Loop
The `for` loop iterates over a list of items or a range of values.

Syntax
        ``````````````````````````````````````````bash
        for variable in list
        do
            commands
        done
        ``````````````````````````````````````````

Example: Iterating Over a List
        ``````````````````````````````````````````bash
        for color in red green blue
        do
            echo "Color: $color"
        done
        ``````````````````````````````````````````

Output:
        ``````````````````````````````````````````
        Color: red
        Color: green
        Color: blue
        ``````````````````````````````````````````

Example: Iterating Over a Range
        ``````````````````````````````````````````bash
        for num in {1..5}
        do
            echo "Number: $num"
        done
        ``````````````````````````````````````````

Output:
        ``````````````````````````````````````````
        Number: 1
        Number: 2
        Number: 3
        Number: 4
        Number: 5
        ``````````````````````````````````````````

________________________________________________________________________________________________________________________________
                                                     2. While Loop
                                                     =============
The `while` loop continues as long as the condition is true.

Syntax
        ``````````````````````````````````````````bash
        while [ condition ]
        do
            commands
        done
        ``````````````````````````````````````````

Example: Counting to 5
        ``````````````````````````````````````````bash
        count=1
        while [ $count -le 5 ]
        do
            echo "Count: $count"
            count=$((count + 1))
        done
        ``````````````````````````````````````````

Output:
        ``````````````````````````````````````````
        Count: 1
        Count: 2
        Count: 3
        Count: 4
        Count: 5
        ``````````````````````````````````````````

________________________________________________________________________________________________________________________________
                                                      3. Until Loop
                                                      =============
The `until` loop executes until the condition becomes true (opposite of `while`).

Syntax
        ``````````````````````````````````````````bash
        until [ condition ]
        do
            commands
        done
        ``````````````````````````````````````````

Example: Counting to 5
        ``````````````````````````````````````````bash
        count=1
        until [ $count -gt 5 ]
        do
            echo "Count: $count"
            count=$((count + 1))
        done
        ``````````````````````````````````````````

Output:
        ``````````````````````````````````````````
        Count: 1
        Count: 2
        Count: 3
        Count: 4
        Count: 5
        ``````````````````````````````````````````

________________________________________________________________________________________________________________________________
                                                     4. Infinite Loops
                                                     =================
You can create loops that run indefinitely, usually combined with a condition to exit using `break`.

Example: Infinite While Loop
        ``````````````````````````````````````````bash
        while true
        do
            echo "Press Ctrl+C to stop"
            sleep 1
        done
        ``````````````````````````````````````````

________________________________________________________________________________________________________________________________
                                             Breaking and Continuing in Loops
                                             ================================

Break
Exits the loop prematurely.

Example
        ``````````````````````````````````````````bash
        for num in {1..10}
        do
            if [ $num -eq 5 ]; then
                break
            fi
            echo "Number: $num"
        done
        ``````````````````````````````````````````

Output:
        ``````````````````````````````````````````
        Number: 1
        Number: 2
        Number: 3
        Number: 4
        ``````````````````````````````````````````

________________________________________________________________________________________________________________________________
                                                     Continue
                                                     ========
Skips the current iteration and proceeds to the next.

Example
        ``````````````````````````````````````````bash
        for num in {1..5}
        do
            if [ $num -eq 3 ]; then
                continue
            fi
            echo "Number: $num"
        done
        ``````````````````````````````````````````

Output:
        ``````````````````````````````````````````
        Number: 1
        Number: 2
        Number: 4
        Number: 5
        ``````````````````````````````````````````

________________________________________________________________________________________________________________________________
                                         Looping Through Files and Directories
                                         =====================================

Example: Iterating Over Files
        ``````````````````````````````````````````bash
        for file in /path/to/directory/
        do
            echo "File: $file"
        done
        ``````````````````````````````````````````

Example: Find and Process Specific Files
        ``````````````````````````````````````````bash
        for file in *.txt
        do
            echo "Processing $file"
            # Add your processing commands here
        done
        ``````````````````````````````````````````

________________________________________________________________________________________________________________________________
                                                     Nesting Loops
                                                     =============

You can nest one loop inside another to handle multidimensional data.

Example
        ``````````````````````````````````````````bash
        for i in {1..3}
        do
            for j in {1..2}
            do
                echo "i=$i, j=$j"
            done
        done
        ``````````````````````````````````````````

Output:
        ``````````````````````````````````````````
        i=1, j=1
        i=1, j=2
        i=2, j=1
        i=2, j=2
        i=3, j=1
        i=3, j=2
        ``````````````````````````````````````````

________________________________________________________________________________________________________________________________
                                                     Reading Input with Loops
                                                     ========================

Example: Reading a File Line by Line
        ``````````````````````````````````````````bash
        while read line
        do
            echo "Line: $line"
        done < filename.txt
        ``````````````````````````````````````````

Example: Reading User Input
        ``````````````````````````````````````````bash
        while true
        do
            read -p "Enter a number (0 to quit): " num
            if [ $num -eq 0 ]; then
                break
            fi
            echo "You entered: $num"
        done
        ``````````````````````````````````````````

________________________________________________________________________________________________________________________________
                                                     Loop Control Variables
                                                     ======================

Controlling Loop Execution
- `set -u`: Detects uninitialized variables.
- `IFS`: Changes the field separator for the loop.

Example: Changing Field Separator
        ``````````````````````````````````````````bash
        IFS=","
        for item in "apple,banana,cherry"
        do
            echo "Item: $item"
        done
        ``````````````````````````````````````````

Output:
        ``````````````````````````````````````````
        Item: apple
        Item: banana
        Item: cherry
        ``````````````````````````````````````````

________________________________________________________________________________________________________________________________
                                                     Advanced Examples
                                                     =================

1. Parallel Execution
Use the `&` operator to run loop iterations in parallel.
        ``````````````````````````````````````````bash
        for i in {1..3}
        do
            (sleep $i && echo "Completed $i") &
        done
        wait
        ``````````````````````````````````````````

2. Loop with Command Substitution
        ``````````````````````````````````````````bash
        for user in $(cut -d: -f1 /etc/passwd)
        do
            echo "User: $user"
        done
        ``````````````````````````````````````````

________________________________________________________________________________________________________________________________
                                                      Best Practices
                                                      ==============
1. Use `local` variables inside functions to prevent variable conflicts.
2. Always validate input when reading from files or user input.
3. Use `break` and `continue` for efficient loop control.
4. Test loop performance when handling large data sets.

________________________________________________________________________________________________________________________________