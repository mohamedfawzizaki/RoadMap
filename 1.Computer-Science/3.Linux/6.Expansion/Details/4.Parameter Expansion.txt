______________________________________________________________________________________________________________________________________
                                                        Parameter Expansion 
                                                        ===================
Parameter expansion in Linux refers to a feature
 in shell scripting (primarily Bash) where variables are expanded or modified before being used.
It allows the shell to retrieve the value of a variable and optionally manipulate
 it (e.g., provide default values, remove substrings, replace text, etc.).
---------------------------------------------------------------------------------------------------------
Basic Parameter Expansion Syntax

        ```bash
        ${parameter}
        ```

        - The simplest form is `${parameter}`, which expands to the value of `parameter`.
        - If the variable is unset or null, the expansion results in an empty string.

        Example:
        ```bash
        name="Linux"
        echo "Hello, ${name}!"
        ```
        Output:
        ```
        Hello, Linux!
        ```
---------------------------------------------------------------------------------------------------------
Advanced Parameter Expansion Forms

1.Default Value (`:-`)

        You can provide a default value if the variable is unset or null.

        ```bash
        ${parameter:-default_value}
        ```

        - If `parameter` is set, its value is used.
        - If `parameter` is unset or null, `default_value` is used.

        Example:
        ```bash
        greeting=${name:-"World"}
        echo "Hello, ${greeting}!"
        ```
        Output (if `name` is unset):
        ```
        Hello, World!
        ```
---------------------------------------------------------------------------------------------------------
2.Assign Default Value (`:=`)

        This form assigns a default value to the variable if it is unset or null.

        ```bash
        ${parameter:=default_value}
        ```

        - If `parameter` is set, its value is used.
        - If `parameter` is unset or null, it is assigned `default_value`.

        Example:
        ```bash
        echo "User: ${USER:=default_user}"
        echo "USER is now set to: $USER"
        ```
---------------------------------------------------------------------------------------------------------
3.Error Message (`:?`)

        This form causes the shell to display an error message if the variable is unset or null.

        ```bash
        ${parameter:?error_message}
        ```

        - If `parameter` is set, its value is used.
        - If `parameter` is unset or null, the shell displays `error_message` and exits the script.

        Example:
        ```bash
        echo "Path: ${PATH:?PATH is not set}"
        ```
        Output (if `PATH` is unset):
        ```
        bash: PATH: PATH is not set
        ```
---------------------------------------------------------------------------------------------------------
4.Use Alternative Value (`:+`)

        This form uses an alternative value if the variable is set.

        ```bash
        ${parameter:+alternative_value}
        ```

        - If `parameter` is set, `alternative_value` is used.
        - If `parameter` is unset or null, nothing is used.

        Example:
        ```bash
        echo "Backup ${BACKUP_DIR:+enabled}"
        ```
        Output (if `BACKUP_DIR` is set):
        ```
        Backup enabled
        ```
---------------------------------------------------------------------------------------------------------
Substring Extraction

        You can extract a substring from a variable using parameter expansion.

        ```bash
        ${parameter:offset:length}
        ```

        - `offset`: The starting index (0-based).
        - `length`: The number of characters to extract (optional).

        Example:
        ```bash
        str="HelloWorld"
        echo ${str:0:5}   Output: Hello
        echo ${str:5}     Output: World
        ```
---------------------------------------------------------------------------------------------------------
String Length

        You can find the length of a string using parameter expansion.

        ```bash
        ${#parameter}
        ```

        Example:
        ```bash
        str="Linux"
        echo "Length: ${#str}"
        ```
        Output:
        ```
        Length: 5
        ```
---------------------------------------------------------------------------------------------------------
Substring Removal

 1.Remove Shortest Match from the Front (`*`)

        ```bash
        ${parameter*pattern}
        ```

        - Removes the shortest match of `pattern` from the beginning of `parameter`.

        Example:
        ```bash
        file="/home/user/document.txt"
        echo ${file/}   Output: home/user/document.txt
        ```

 2.Remove Longest Match from the Front (`*`)

        ```bash
        ${parameter*pattern}
        ```

        - Removes the longest match of `pattern` from the beginning of `parameter`.

        Example:
        ```bash
        echo ${file/}   Output: document.txt
        ```
---------------------------------------------------------------------------------------------------------
3.Remove Shortest Match from the End (`%`)

        ```bash
        ${parameter%pattern}
        ```

        - Removes the shortest match of `pattern` from the end of `parameter`.

        Example:
        ```bash
        echo ${file%.}   Output: /home/user/document
        ```

 4.Remove Longest Match from the End (`%%`)

        ```bash
        ${parameter%%pattern}
        ```

        - Removes the longest match of `pattern` from the end of `parameter`.

        Example:
        ```bash
        echo ${file%%.}   Output: /home/user/document
        ```
---------------------------------------------------------------------------------------------------------
Search and Replace

 1.Replace First Match (`/`)

        ```bash
        ${parameter/pattern/replacement}
        ```

        - Replaces the first match of `pattern` with `replacement`.

        Example:
        ```bash
        str="Linux is great"
        echo ${str/is/was}   Output: Linux was great
        ```

 2.Replace All Matches (`//`)

        ```bash
        ${parameter//pattern/replacement}
        ```

        - Replaces all matches of `pattern` with `replacement`.

        Example:
        ```bash
        echo ${str//is/was}   Output: Linux was great
        ```
---------------------------------------------------------------------------------------------------------
Uppercase and Lowercase Conversion

 1.Convert to Uppercase (`^^`)

        ```bash
        ${parameter^^}
        ```

        - Converts all lowercase characters to uppercase.

        Example:
        ```bash
        str="linux"
        echo ${str^^}   Output: LINUX
        ```

 2.Convert to Lowercase (`,,`)

        ```bash
        ${parameter,,}
        ```

        - Converts all uppercase characters to lowercase.

        Example:
        ```bash
        str="LINUX"
        echo ${str,,}   Output: linux
        ```
---------------------------------------------------------------------------------------------------------
Conclusion

Parameter expansion is a powerful tool in Linux shell scripting that
 enables advanced string manipulation, variable substitution, and conditional handling.
Mastering parameter expansion can significantly enhance the flexibility and functionality of your shell scripts.
______________________________________________________________________________________________________________________________________
