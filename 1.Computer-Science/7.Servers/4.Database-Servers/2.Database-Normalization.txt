_____________________________________________________________________________________________________________________________________
                      
                                                    Database Normalization    

_____________________________________________________________________________________________________________________________________
                                                1. What is Database Normalization?  

Database normalization is the process of organizing a database to reduce redundancy and improve data integrity. 
It involves dividing large tables into smaller, more structured tables and defining relationships between them.

Normalization ensures:  
‚úî Elimination of duplicate data  
‚úî Minimized data redundancy  
‚úî Improved data consistency  
‚úî Efficient query performance  
‚úî Easier maintenance  

_____________________________________________________________________________________________________________________________________
                                               2. Why Use Database Normalization?  

 Problems Solved by Normalization  
‚ùå Data Redundancy ‚Äì Avoids storing the same data in multiple places.  
‚ùå Update Anomalies ‚Äì Ensures updating a record in one place doesn‚Äôt require multiple updates elsewhere.  
‚ùå Insertion Anomalies ‚Äì Allows adding data without needing unrelated fields.  
‚ùå Deletion Anomalies ‚Äì Prevents loss of important data when deleting records.  

Normalization improves data integrity, but over-normalization can hurt performance.  
üîπ Use normalization for OLTP systems (transactional databases).  
üîπ Use denormalization for OLAP systems (analytical databases).  
_____________________________________________________________________________________________________________________________________
                                               3. Normal Forms (NF) Explained  

Database normalization follows a series of rules called normal forms (NF). 
Each normal form builds upon the previous one.

 _________________________________________________________________________________________________________________
|          Normal Form           |              Purpose                               |       Eliminates          |
|________________________________|____________________________________________________|___________________________|
| 1NF  (First Normal Form)       | Ensure each column has atomic values.              | Repeating groups          |
|                               üîπ Each column should have atomic (indivisible) values.  
|                               üîπ Each row should be unique with a primary key.  
|                               üîπ No arrays or lists in columns.
|________________________________|____________________________________________________|___________________________|
| 2NF  (Second Normal Form)      | Remove partial dependencies.                       | Partial dependencies      |
|                               üîπ 1NF must be satisfied.  
|                               üîπ All non-key columns should depend on the whole primary key, not just part of it. 
|________________________________|____________________________________________________|___________________________|
| 3NF  (Third Normal Form)       | Remove transitive dependencies.                    | Transitive dependencies   |
|                               üîπ 2NF must be satisfied.  
|                               üîπ No non-key column should depend on another non-key column.  
|                               üîπ Every non-key column should depend only on the primary key.
|________________________________|____________________________________________________|___________________________|
| BCNF (Boyce-Codd Normal Form)  | Improve 3NF if needed.                             | Functional dependencies   |
|                               üîπ 3NF must be satisfied.  
|                               üîπ Every determinant (column that determines another) must be a candidate key. 
|________________________________|____________________________________________________|___________________________|
| 4NF  (Fourth Normal Form)      | Remove multi-valued dependencies.                  | Multi-valued dependencies |
|                               üîπ BCNF must be satisfied.  
|                               üîπ A table should not contain more than one independent multi-valued attribute. 
|________________________________|____________________________________________________|___________________________|
| 5NF  (Fifth Normal Form)       | Eliminate redundancy caused by join dependencies.  | Join dependencies         |
|                               üîπ BCNF must be satisfied.  
|                               üîπ A table should not contain more than one independent multi-valued attribute.
|________________________________|____________________________________________________|___________________________|

Let‚Äôs go through each one in detail.

_____________________________________________________________________________________________________________________________________
                                            
                                            4. Normal Forms in Detail (With Examples)

----------------------------------------------------------------------------------------------------------------------
                                        ‚ù∂ First Normal Form (1NF) ‚Äì Eliminate Repeating Groups  

üîπ Each column should have atomic (indivisible) values.  
üîπ Each row should be unique with a primary key.  
üîπ No arrays or lists in columns.

Example (Not in 1NF)  
                     _______________________________________
                    | Student_ID   | Name  | Courses        | 
                    |______________|_______|________________| 
                    |    1         | Alice | Math, Science  |  
                    |    2         | Bob   | English        |  
                    |    3         | Carol | Math, English  |  
                    |______________|_______|________________| 

- The Courses column contains multiple values.  

Solution (1NF Applied) ‚Äì Break into Atomic Values  
                     _______________________________________
                    | Student_ID   | Name  |     Course     |  
                    |______________|_______|________________| 
                    |      1       | Alice |    Math        |  
                    |      1       | Alice |    Science     |  
                    |      2       | Bob   |    English     |  
                    |      3       | Carol |    Math        |  
                    |      3       | Carol |    English     |  
                    |______________|_______|________________| 

Now, each column contains atomic values, and each row is unique.

----------------------------------------------------------------------------------------------------------------------
                                ‚ù∑ Second Normal Form (2NF) ‚Äì Eliminate Partial Dependencies  

üîπ 1NF must be satisfied.  
üîπ All non-key columns should depend on the whole primary key, not just part of it. 

Example (1NF Table with Partial Dependency):

                            | OrderID | ProductID| CustomerName| ProductName|
                            |---------|----------|-------------|------------|
                            | 1       | 101      | John Doe    | Laptop     |
                            | 1       | 102      | John Doe    | Mouse      |

Problems:
- `CustomerName` depends only on `OrderID`, not on `ProductID`.

Solution (Convert to 2NF by splitting into separate tables):

Orders Table:
                                    | OrderID | CustomerName|
                                    |---------|-------------|
                                    | 1       | John Doe    |
                                    | 2       | Alice Smith |

OrderDetails Table:
                                    | OrderID | ProductID|
                                    |---------|----------|
                                    | 1       | 101      |
                                    | 1       | 102      |

Products Table:
                                    | ProductID| ProductName |
                                    |----------|-------------|
                                    | 101      | Laptop      |
                                    | 102      | Mouse       |


----------------------------------------------------------------------------------------------------------------------
                           ‚ù∏ Third Normal Form (3NF) ‚Äì Eliminate Transitive Dependencies  

üîπ 2NF must be satisfied.  
üîπ No non-key column should depend on another non-key column.  
üîπ Every non-key column should depend only on the primary key.  

 
Example (2NF Table with Transitive Dependency):

                        | OrderID | CustomerID| CustomerName| CustomerPhone|
                        |---------|-----------|-------------|--------------|
                        | 1       | 201       | John Doe    | 1234567890   |
                        | 2       | 202       | Alice Smith | 9876543210   |

Problem:
- `CustomerName` and `CustomerPhone` depend on `CustomerID`, not `OrderID`. This causes redundancy.

Solution (Convert to 3NF by separating customers into a new table):

Orders Table:
                                | OrderID | CustomerID|
                                |---------|-----------|
                                | 1       | 201       |
                                | 2       | 202       |

Customers Table:
                        | CustomerID| CustomerName| CustomerPhone|
                        |-----------|-------------|--------------|
                        | 201       | John Doe    | 1234567890   |
                        | 202       | Alice Smith | 9876543210   |



----------------------------------------------------------------------------------------------------------------------
                                ‚ùπ Boyce-Codd Normal Form (BCNF) ‚Äì Strengthened 3NF  

üîπ 3NF must be satisfied.  
üîπ Every determinant (column that determines another) must be a candidate key.  

 Example (Not in BCNF)  
                     _________________________________________
                    | Student_ID   | Course  | Instructor     |  
                    |______________|_________|________________| 
                    | 1            | Math    | Mr. Smith      |  
                    | 2            | Science | Mrs. Jones     |  
                    | 3            | Math    | Mr. Brown      |  
                    |______________|_________|________________| 

- `Instructor` determines `Course`, but `Instructor` is not a primary key.

 Solution (BCNF Applied) ‚Äì Remove Functional Dependency  
‚úÖ Student Table  
                     _______________________
                    | Student_ID   | Course |  
                    |______________|________| 
                    | 1            | Math   |  
                    | 2            | Science|  
                    | 3            | Math   |  
                    |______________|________| 

‚úÖ Course Table  
                     ___________________________
                    | Course       | Instructor |  
                    |______________|____________| 
                    | Math         | Mr. Smith  |  
                    | Science      | Mrs. Jones |  
                    |______________|____________| 

Now, Instructor is fully dependent on `Course`, maintaining consistency.

----------------------------------------------------------------------------------------------------------------------
                              ‚ù∫ Fourth Normal Form (4NF) ‚Äì Remove Multi-Valued Dependencies  

üîπ BCNF must be satisfied.  
üîπ A table should not contain more than one independent multi-valued attribute.  

 Example (Not in 4NF)  
                     __________________________________
                    | Student_ID   | Course | Hobby    |   
                    |______________|________|__________| 
                    | 1            | Math   | Chess    |  
                    | 1            | Math   | Football |  
                    | 1            | Science| Chess    |  
                    |______________|________|__________| 

- Course and Hobby are independent, causing redundancy.

 Solution (4NF Applied) ‚Äì Create Separate Tables  
‚úÖ Student_Course Table  
                     ________________________
                    | Student_ID   | Course  |  
                    |______________|_________| 
                    | 1            | Math    |  
                    | 1            | Science |  
                    |______________|_________| 

‚úÖ Student_Hobby Table 
                     ________________________
                    | Student_ID   | Hobby   |  
                    |______________|_________| 
                    | 1            | Chess   |  
                    | 1            | Football|  
                    |______________|_________| 

Now, Course and Hobby are stored separately.

----------------------------------------------------------------------------------------------------------------------
_____________________________________________________________________________________________________________________________________
                                            5. When to Stop Normalizing?

Normalization improves data integrity, but over-normalization can hurt performance.  
üîπ Use normalization for OLTP systems (transactional databases).  
üîπ Use denormalization for OLAP systems (analytical databases).  
_____________________________________________________________________________________________________________________________________
