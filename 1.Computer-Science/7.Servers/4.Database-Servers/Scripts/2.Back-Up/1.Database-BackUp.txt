___________________________________________________________________________________________________________________________________
                                                   Backing up a MySQL

Backing up a MySQL database on Ubuntu is crucial for data recovery and disaster management. 

Hereâ€™s a detailed guide on different backup strategies:

___________________________________________________________________________________________________________________________________
                                      1. Backup Using `mysqldump` (Logical Backup)
                __________________________________________________________________________________________________________
               |__________________________________________________________________________________________________________|
               |         mysqldump -u [username] -p [database_name] > [backup_file].sql                                   |
               |----------------------------------------------------------------------------------------------------------|
               |         mysqldump -u [username] -p --databases db1 db2 db3 > [backup_file].sql                           |
               |----------------------------------------------------------------------------------------------------------|
               |         mysqldump -u [username] -p --all-databases > [backup_file].sql                                   |
               |----------------------------------------------------------------------------------------------------------|
               |         mysqldump -u [username] -p --routines --events --triggers [database_name] > [backup_file].sql    |
               |         mysqldump -u [username] -p --single-transaction [database_name] > [backup_file].sql              |
               |----------------------------------------------------------------------------------------------------------|
               |         mysqldump -u [username] -p [database_name] table1 table2 > [backup_file].sql                     |
               |----------------------------------------------------------------------------------------------------------|
               |         mysqldump -u [username] -p --no-data [database_name] > [backup_file].sql                         |
               |----------------------------------------------------------------------------------------------------------|
               |         mysqldump -u [username] -p --no-create-info [database_name] > [backup_file].sql                  |
               |----------------------------------------------------------------------------------------------------------|
               |----------------------------------------------------------------------------------------------------------|                           
               |         mysqldump -u [username] -p my_database | gzip > my_database_backup.sql.gz                        |
               |----------------------------------------------------------------------------------------------------------|
               |__________________________________________________________________________________________________________|
               |__________________________________________________________________________________________________________|
               |         mysql -u [username] -p my_database < my_database_backup.sql                                      |
               |----------------------------------------------------------------------------------------------------------|
               |         mysql -u [username] -p < all_databases_backup.sql                                                |
               |----------------------------------------------------------------------------------------------------------|
               |         gunzip < my_database_backup.sql.gz | mysql -u [username] -p my_database                          |
               |__________________________________________________________________________________________________________|
               |__________________________________________________________________________________________________________|
___________________________________________________________________________________________________________________________________

`mysqldump` is a built-in tool to create backups in SQL format.

                                             Full Database Backup
To back up a single database:

````````````````````````````````````````````````````````````````````````````````bash
mysqldump -u root -p my_database > my_database_backup.sql
````````````````````````````````````````````````````````````````````````````````

For multiple databases:

````````````````````````````````````````````````````````````````````````````````bash
mysqldump -u root -p --databases db1 db2 db3 > multiple_databases_backup.sql
````````````````````````````````````````````````````````````````````````````````

For all databases:

````````````````````````````````````````````````````````````````````````````````bash
mysqldump -u root -p --all-databases > all_databases_backup.sql
````````````````````````````````````````````````````````````````````````````````

To include triggers, events, and stored procedures, use:

````````````````````````````````````````````````````````````````````````````````bash
mysqldump -u root -p --routines --events --triggers my_database > full_backup.sql
````````````````````````````````````````````````````````````````````````````````

Backup Specific Tables: To back up specific tables from a database:

````````````````````````````````````````````````````````````````````````````````bash
mysqldump -u root -p my_database table1 table2 > specific_tables_backup.sql
````````````````````````````````````````````````````````````````````````````````


                                           Backup with Compression
                                           
Reduce backup file size by compressing it:

````````````````````````````````````````````````````````````````````````````````bash
mysqldump -u root -p my_database | gzip > my_database_backup.sql.gz
````````````````````````````````````````````````````````````````````````````````

To restore from a compressed backup:

````````````````````````````````````````````````````````````````````````````````bash
gunzip < my_database_backup.sql.gz | mysql -u root -p my_database
````````````````````````````````````````````````````````````````````````````````

___________________________________________________________________________________________________________________________________
                                        2. Restoring from `mysqldump` Backup
To restore a single database:

````````````````````````````````````````````````````````````````````````````````bash
mysql -u root -p my_database < my_database_backup.sql
````````````````````````````````````````````````````````````````````````````````

For multiple databases:

````````````````````````````````````````````````````````````````````````````````bash
mysql -u root -p < multiple_databases_backup.sql
````````````````````````````````````````````````````````````````````````````````

For all databases:

````````````````````````````````````````````````````````````````````````````````bash
mysql -u root -p < all_databases_backup.sql
````````````````````````````````````````````````````````````````````````````````

___________________________________________________________________________________________________________________________________
                                         3. Automating Backups with Cron Jobs
To schedule daily backups:

1. Open crontab:

   ````````````````````````````````````````````````````````````````````````````````bash
   crontab -e
   ````````````````````````````````````````````````````````````````````````````````

2. Add a backup job (runs every day at 2 AM):

   ````````````````````````````````````````````````````````````````````````````````bash
   0 2 * * *  mysqldump -u root -p'MyPassword' my_database | gzip > /backup/mysql/my_database_$(date +\%F).sql.gz
   ````````````````````````````````````````````````````````````````````````````````

3. Create the backup folder:


   ````````````````````````````````````````````````````````````````````````````````bash
   sudo mkdir -p /backup/mysql
   sudo chmod 700 /backup/mysql
   ````````````````````````````````````````````````````````````````````````````````

4. Check cron logs to verify execution:

   ````````````````````````````````````````````````````````````````````````````````bash
   cat /var/log/syslog | grep cron
   ````````````````````````````````````````````````````````````````````````````````

___________________________________________________________________________________________________________________________________
                                    4. Physical Backup Using `rsync` (Faster for Large Databases)

For large databases, `mysqldump` may be slow. Copying raw MySQL data files is faster.

 Steps:
1. Stop MySQL to avoid corruption:

   ````````````````````````````````````````````````````````````````````````````````bash
   sudo systemctl stop mysql
   ````````````````````````````````````````````````````````````````````````````````

2. Backup MySQL Data Directory:

   ````````````````````````````````````````````````````````````````````````````````bash
   sudo rsync -av /var/lib/mysql /backup/mysql_data/
   ````````````````````````````````````````````````````````````````````````````````

3. Restart MySQL:

   ````````````````````````````````````````````````````````````````````````````````bash
   sudo systemctl start mysql
   ````````````````````````````````````````````````````````````````````````````````

4. Restore: Copy back data when needed:

   ````````````````````````````````````````````````````````````````````````````````bash
   sudo systemctl stop mysql
   sudo rsync -av /backup/mysql_data/ /var/lib/mysql/
   sudo systemctl start mysql
   ````````````````````````````````````````````````````````````````````````````````

___________________________________________________________________________________________________________________________________
                                       5. Backup Using `mysqlpump` (Parallel Backup)

`mysqlpump` is an advanced alternative to `mysqldump`, supporting parallel backups.

````````````````````````````````````````````````````````````````````````````````bash
mysqlpump -u root -p --default-parallelism=4 my_database > my_database_pump.sql
````````````````````````````````````````````````````````````````````````````````

To restore:

````````````````````````````````````````````````````````````````````````````````bash
mysql -u root -p < my_database_pump.sql
````````````````````````````````````````````````````````````````````````````````

___________________________________________________________________________________________________________________________________
                                    6. Using MySQL Enterprise Backup (Physical Hot Backup)

For large-scale production environments, MySQL Enterprise Backup provides non-blocking backups:

````````````````````````````````````````````````````````````````````````````````bash
mysqlbackup --user=root --password='MyPassword' --backup-dir=/backup/mysql --backup-image=backup.mbi backup-to-image
````````````````````````````````````````````````````````````````````````````````

Restoring:

````````````````````````````````````````````````````````````````````````````````bash
mysqlbackup --user=root --password='MyPassword' --backup-dir=/backup/mysql --backup-image=backup.mbi copy-back
````````````````````````````````````````````````````````````````````````````````

(Note: MySQL Enterprise Backup requires a commercial license.)

___________________________________________________________________________________________________________________________________
                                            7. Remote Backup to Another Server

Backup to a remote server using SSH and SCP:

````````````````````````````````````````````````````````````````````````````````bash
mysqldump -u root -p my_database | gzip | ssh user@remote-server "cat > /backup/mysql/my_database_$(date +\%F).sql.gz"
````````````````````````````````````````````````````````````````````````````````

Restore from remote:

````````````````````````````````````````````````````````````````````````````````bash
ssh user@remote-server "cat /backup/mysql/my_database_$(date +\%F).sql.gz" | gunzip | mysql -u root -p my_database
````````````````````````````````````````````````````````````````````````````````

___________________________________________________________________________________________________________________________________
                                        8. Cloud Backup (Google Drive, AWS S3)

                                                  Google Drive Backup
Using `rclone` to sync backups to Google Drive:

1. Install `rclone`:

   ````````````````````````````````````````````````````````````````````````````````bash
   sudo apt install rclone
   ````````````````````````````````````````````````````````````````````````````````

2. Configure Google Drive:

   ````````````````````````````````````````````````````````````````````````````````bash
   rclone config
   ````````````````````````````````````````````````````````````````````````````````

3. Sync backup:

   ````````````````````````````````````````````````````````````````````````````````bash
   rclone copy /backup/mysql mydrive:mysql_backups
   ````````````````````````````````````````````````````````````````````````````````

                                                     AWS S3 Backup
1. Install AWS CLI:

   ````````````````````````````````````````````````````````````````````````````````bash
   sudo apt install awscli
   ````````````````````````````````````````````````````````````````````````````````

2. Configure AWS credentials:

   ````````````````````````````````````````````````````````````````````````````````bash
   aws configure
   ````````````````````````````````````````````````````````````````````````````````

3. Upload backup:

   ````````````````````````````````````````````````````````````````````````````````bash
   aws s3 cp /backup/mysql/my_database_backup.sql.gz s3://my-database-backups/
   ````````````````````````````````````````````````````````````````````````````````

___________________________________________________________________________________________________________________________________
                                        9. Incremental Backups Using Binary Logs

1. Enable Binary Logs:  
   Edit `/etc/mysql/mysql.conf.d/mysqld.cnf`:

   ````````````````````````````````````````````````````````````````````````````````ini
   [mysqld]
   log_bin = /var/log/mysql/mysql-bin.log
   ````````````````````````````````````````````````````````````````````````````````

2. Restart MySQL:

   ````````````````````````````````````````````````````````````````````````````````bash
   sudo systemctl restart mysql
   ````````````````````````````````````````````````````````````````````````````````

3. Take Full Backup:

   ````````````````````````````````````````````````````````````````````````````````bash
   mysqldump -u root -p --all-databases --single-transaction --flush-logs > full_backup.sql
   ````````````````````````````````````````````````````````````````````````````````

4. Backup Binary Logs Periodically:

   ````````````````````````````````````````````````````````````````````````````````bash
   cp /var/log/mysql/mysql-bin.* /backup/mysql_binlogs/
   ````````````````````````````````````````````````````````````````````````````````

5. Restore:
   - Restore full backup:

     ````````````````````````````````````````````````````````````````````````````````bash
     mysql -u root -p < full_backup.sql
     ````````````````````````````````````````````````````````````````````````````````

   - Apply binary logs:

     ````````````````````````````````````````````````````````````````````````````````bash
     mysqlbinlog /backup/mysql_binlogs/mysql-bin. | mysql -u root -p
     ````````````````````````````````````````````````````````````````````````````````

___________________________________________________________________________________________________________________________________
                                                Best Backup Strategy
                            ________________________________________________________________
                           |          Use Case             |   Recommended Backup Method    |
                           |_______________________________|________________________________|
                           | Small databases               | mysqldump                      |
                           | Large databases               | mysqlpump                      |
                           | Production servers            | Physical backup with `rsync`   |
                           | High-performance backup       | MySQL Enterprise Backup        |
                           | Remote backup                 | SSH, SCP, AWS S3, Google Drive |
                           | Continuous incremental backup | Binary logs                    |
                           |_______________________________|________________________________|

___________________________________________________________________________________________________________________________________
                                                         Conclusion

- For daily backups â†’ Use `mysqldump` with `cron`
- For large databases â†’ Use `rsync` or `mysqlpump`
- For cloud storage â†’ Use `rclone` (Google Drive) or `AWS S3`
- For incremental backups â†’ Enable binary logs
- For production environments â†’ Consider MySQL Enterprise Backup
___________________________________________________________________________________________________________________________________