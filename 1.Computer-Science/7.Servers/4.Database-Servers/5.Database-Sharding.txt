_____________________________________________________________________________________________________________________________________
                                                    
                                                    Database Sharding   

_____________________________________________________________________________________________________________________________________
                                                1. What is Database Sharding?

Database sharding is a database architecture pattern
 that partitions a large database into smaller, faster, and more manageable pieces, called shards. 
 
Each shard operates as an independent database instance and contains a subset of the data.

Sharding is used for scalability, performance improvement, and horizontal scaling in large-scale applications.

_____________________________________________________________________________________________________________________________________
                                                    2. Why Use Sharding?

Sharding is implemented to address performance and scaling challenges, especially in large applications with high query loads.

 Benefits of Sharding
✔ Scalability: Distributes data across multiple servers, reducing bottlenecks.  
✔ Improved Performance: Queries are executed faster because each shard contains only a portion of the data.  
✔ High Availability: If one shard goes down, the others continue functioning.  
✔ Better Load Balancing: Distributes queries evenly across different shards.  
✔ Reduced Hardware Costs: Cheaper than upgrading to a powerful single server (vertical scaling).  

 Challenges of Sharding
❌ Complexity: Requires a well-planned architecture.  
❌ Data Management Issues: Some queries (like joins across shards) become complex.  
❌ Increased Maintenance: Backups, indexing, and consistency checks need additional handling.  
❌ Rebalancing: If shards become unbalanced, data redistribution is necessary.

_____________________________________________________________________________________________________________________________________
                                                3. Sharding vs Replication
                     ___________________________________________________________________________________________
                    |     Feature      |            Sharding                  |         Replication             |
                    |__________________|______________________________________|_________________________________|
                    | Purpose          | Distributes data                     | Duplicates data                 |
                    | Scaling Type     | Horizontal scaling                   | Read scaling                    |
                    | Performance      | Increases with more shards           | Improves read performance       |
                    | Data Duplication | No duplication (each shard is unique)| Every replica has the same data |
                    | Use Case         | Large applications with big datasets | High-availability setups        |
                    |__________________|______________________________________|_________________________________|
  
_____________________________________________________________________________________________________________________________________
                                                4. Types of Sharding Strategies

There are several ways to implement sharding, depending on how the data is distributed across shards.
___________________________________________________________
 a. Range-Based Sharding (Key-Based Sharding)
- Data is divided into shards based on a range of values (e.g., User IDs, dates).
- Each shard contains a specific range.
  
✅ Pros: Simple to implement, efficient queries for a specific range.  
❌ Cons: Uneven distribution may lead to "hot shards" (overloaded nodes).  

Example:
             _________________________
            | User ID Range |  Shard  |
            |_______________|_________|
            | 1 - 10000     | Shard A |
            | 10001 - 20000 | Shard B |
            | 20001 - 30000 | Shard C |
            |_______________|_________|

___________________________________________________________

 b. Hash-Based Sharding
- A hashing function determines which shard stores a particular record.
- Ensures even distribution but makes range queries complex.

✅ Pros: Balances data across shards.  
❌ Cons: Harder to perform range queries.  

Example:  
````````````````````````````````````````````````````````sql
SHARD_ID = HASH(user_id) % TOTAL_SHARDS
````````````````````````````````````````````````````````
If `user_id = 12345` and `TOTAL_SHARDS = 3`:
- `HASH(12345) % 3 = 2`, so this user is stored in Shard 2.

___________________________________________________________

 c. Geo-Based Sharding
- Data is partitioned based on user location or geographical region.
- Common in global applications (e.g., social media, e-commerce).

✅ Pros: Reduces latency, regional data processing.  
❌ Cons: Some shards may become overloaded.

Example:
             _________________________
            |    Region     | Shard   |
            |_______________|_________|
            | North America | Shard A |
            | Europe        | Shard B |
            | Asia          | Shard C |
            |_______________|_________|

___________________________________________________________

 d. Directory-Based Sharding (Lookup Table)
- Uses a mapping table to store which shard contains a specific record.
- The application queries the mapping table first before accessing the data.

✅ Pros: Highly flexible, can support any sharding logic.  
❌ Cons: Lookup table becomes a single point of failure.  

Example:
             ___________________
            | User ID |  Shard  |
            |_________|_________|
            | 101     | Shard A |
            | 205     | Shard C |
            | 409     | Shard B |
            |_________|_________|

_____________________________________________________________________________________________________________________________________
                                                    5. Sharding Implementation in MySQL

 ___________________________________________________________
 Step 1: Set Up Multiple MySQL Servers
1. Install MySQL on multiple servers:
   ````````````````````````````````````````````````````````bash
   sudo apt install mysql-server
   ````````````````````````````````````````````````````````

2. Configure each MySQL instance with a unique `server-id` in my.cnf:
   ````````````````````````````````````````````````````````ini
   [mysqld]
   server-id=1
   datadir=/var/lib/mysql
   ````````````````````````````````````````````````````````

___________________________________________________________

 Step 2: Create Sharded Databases
On each MySQL server, create a different database for each shard:
````````````````````````````````````````````````````````sql
CREATE DATABASE user_data_shard_1;
CREATE DATABASE user_data_shard_2;
CREATE DATABASE user_data_shard_3;
````````````````````````````````````````````````````````

___________________________________________________________

 Step 3: Define a Sharding Function
Example of hash-based sharding in PHP:
````````````````````````````````````````````````````````php
function getShard($userId) {
    $totalShards = 3;
    return "user_data_shard_" . ($userId % $totalShards + 1);
}

$userId = 12345;
$shardDB = getShard($userId);
echo "Store user in: " . $shardDB;
````````````````````````````````````````````````````````

___________________________________________________________

 Step 4: Routing Queries to the Correct Shard
Application logic should route queries to the correct database:
````````````````````````````````````````````````````````php
$shards = [
    'user_data_shard_1' => new PDO("mysql:host=192.168.1.10;dbname=user_data_shard_1", "user", "password"),
    'user_data_shard_2' => new PDO("mysql:host=192.168.1.11;dbname=user_data_shard_2", "user", "password"),
    'user_data_shard_3' => new PDO("mysql:host=192.168.1.12;dbname=user_data_shard_3", "user", "password"),
];

$userId = 56789;
$shardName = getShard($userId);
$db = $shards[$shardName];

$stmt = $db->prepare("INSERT INTO users (id, name) VALUES (?, ?)");
$stmt->execute([$userId, 'John Doe']);
````````````````````````````````````````````````````````

_____________________________________________________________________________________________________________________________________
                                                6. Managing Sharded Databases

 a. Data Migration
- When adding a new shard, data redistribution is required.
- Use ETL (Extract, Transform, Load) pipelines.

 b. Joins Across Shards
- Avoid joins; use denormalization.
- If necessary, fetch data from multiple shards and join in the application.

 c. Rebalancing Shards
- If some shards are overloaded, move records to new shards.
- Implement consistent hashing to prevent excessive data movement.

_____________________________________________________________________________________________________________________________________
                                                7. Sharding in Large-Scale Systems

 Example: Facebook
- Uses geographical sharding for user data.
- Posts and messages are stored in separate databases.

 Example: Amazon
- Orders, products, and users are sharded based on categories and regions.

_____________________________________________________________________________________________________________________________________
                                                8. Sharding vs Partitioning
                         __________________________________________________________________________________________
                        |    Feature  |        Sharding                     |            Partitioning              |
                        |_____________|_____________________________________|______________________________________|
                        | Definition  | Splits data across multiple servers | Splits data within a single database |
                        | Scaling     | Horizontal scaling                  | Vertical scaling                     |
                        | Performance | High (more hardware)                | Limited (single server)              |
                        |_____________|_____________________________________|______________________________________|

_____________________________________________________________________________________________________________________________________
                                                        Conclusion

Sharding is an essential technique for scaling databases, but it requires careful planning to avoid complications. 
Choosing the right sharding strategy depends on your data distribution, query patterns, and growth expectations.

_____________________________________________________________________________________________________________________________________