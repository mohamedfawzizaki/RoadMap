_____________________________________________________________________________________________________________________________________
                                          1Ô∏è‚É£ Path-Based Routing (URL-Based Routing)

- Routes requests based on the URL path.  
- Common in API Gateways, Reverse Proxies, and Web Servers.  
- Best for: Microservices, API Gateways, Reverse Proxies.  
- Example:
  - `/users` ‚Üí `User Service`
  - `/orders` ‚Üí `Order Service`

üîπ Example (Nginx Configuration)  
```````````````````````````````````````````````````````nginx
server {
    listen 80;

    location /users/ {
        proxy_pass http://user-service;
    }

    location /orders/ {
        proxy_pass http://order-service;
    }
}
```````````````````````````````````````````````````````

_____________________________________________________________________________________________________________________________________
                                        2Ô∏è‚É£ Host-Based Routing (Domain-Based Routing)

- Routes requests based on the domain name or subdomain.  
- Useful in multi-tenant applications and multi-region deployments.  
- Best for: Multi-tenant applications, API Gateways, Cloud Load Balancers.  

üîπ Example (Nginx Configuration)
```````````````````````````````````````````````````````nginx
server {
    server_name api.example.com;
    location / {
        proxy_pass http://api-service;
    }
}

server {
    server_name admin.example.com;
    location / {
        proxy_pass http://admin-service;
    }
}
```````````````````````````````````````````````````````

_____________________________________________________________________________________________________________________________________
                                                3Ô∏è‚É£ Header-Based Routing

- Routes requests based on HTTP headers, such as `User-Agent`, `X-API-Version`, or `Authorization`.  
- Used for API versioning, device-specific handling, and A/B testing.  
- Best for: API versioning, A/B testing, security filtering.  

üîπ Example (Kong API Gateway)
```````````````````````````````````````````````````````yaml
_format_version: "2.1"
services:
  - name: user-service
    url: http://user-service
    routes:
      - name: user-api-v1
        headers:
          X-API-Version:
            - "1.0"
```````````````````````````````````````````````````````

_____________________________________________________________________________________________________________________________________
                                              4Ô∏è‚É£ Query Parameter-Based Routing

- Routes requests based on URL query parameters.  
- Best for: Dynamic filtering, search services, API parameter handling.  
- Example:
  - `/products?id=123` ‚Üí Product Service
  - `/search?q=laptop` ‚Üí Search Service  

üîπ Example (Express.js in Node.js)  
```````````````````````````````````````````````````````javascript
app.get('/products', (req, res) => {
    if (req.query.id) {
        res.redirect(`http://product-service?id=${req.query.id}`);
    } else {
        res.redirect('http://search-service');
    }
});
```````````````````````````````````````````````````````

_____________________________________________________________________________________________________________________________________
                                                  5Ô∏è‚É£ Method-Based Routing

- Routes requests based on HTTP methods (`GET`, `POST`, `PUT`, `DELETE`).  
- Common in REST APIs and API Gateways.  
- Best for: REST APIs, API Gateways, CRUD operations.  

üîπ Example (Laravel Routes)
```````````````````````````````````````````````````````php
Route::get('/users', [UserController::class, 'index']);  // List users
Route::post('/users', [UserController::class, 'store']); // Create user
```````````````````````````````````````````````````````

_____________________________________________________________________________________________________________________________________