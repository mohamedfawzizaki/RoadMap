_______________________________________________________________________________________________________________________________________
                                                üìå Nginx `location` Directives

The `location` block in Nginx is used to define how requests should be processed based on the URI (Uniform Resource Identifier). 
It allows routing, rewriting, proxying, and security control.

_______________________________________________________________________________________________________________________________________

 üîπ 1Ô∏è‚É£ `location` Syntax & Matching
 Basic Syntax
````````````````````````````````````````````````````````````````````nginx
location [modifier] pattern {
    # Directives and rules for this location
}
````````````````````````````````````````````````````````````````````
 Matching Modifiers
| Modifier  |           Description                     |       Example             
| (None)    | Exact prefix match                        | `location /images/` 
| `=`       | Exact match (no longer URI processing)    | `location = /favicon.ico` 
| `^~`      | Prefix match (highest priority for prefix)| `location ^~ /static/` 
| `~`       | Case-sensitive regex match                | `location ~ \.(jpg|png)$` 
| `~`       | Case-insensitive regex match              | `location ~ \.(jpg|png|gif)$` 

_______________________________________________________________________________________________________________________________________

 üîπ 2Ô∏è‚É£ Core `location` Directives
| Directive     |               Description 
| `root`        | Defines the root directory for file requests. 
| `index`       | Specifies the default index file (e.g., `index.html`). 
| `alias`       | Maps a URI path to a different physical path. 
| `try_files`   | Checks for files in order before returning an error. 
| `return`      | Redirects or sends an HTTP status response. 
| `rewrite`     | Modifies request URIs using regex. 

_______________________________________________________________________________________________________________________________________

 üîπ 3Ô∏è‚É£ Security & Access Control
| `allow`                   | Allows access from specific IPs. 
| `deny`                    | Denies access from specific IPs. 
| `auth_basic`              | Enables HTTP basic authentication. 
| `auth_basic_user_file`    | Specifies the password file for authentication. 

_______________________________________________________________________________________________________________________________________

 üîπ 4Ô∏è‚É£ Proxy & Reverse Proxy
| `proxy_pass`          | Forwards requests to a backend server. 
| `proxy_set_header`    | Modifies headers sent to the backend. 
| `proxy_redirect`      | Adjusts redirects from the backend. 

_______________________________________________________________________________________________________________________________________

 üìå Example Configurations
 1Ô∏è‚É£ Basic File Serving
````````````````````````````````````````````````````````````````````nginx
location /static/ {
    root /var/www;
    index index.html;
}
````````````````````````````````````````````````````````````````````

 2Ô∏è‚É£ Redirect Requests
````````````````````````````````````````````````````````````````````nginx
location /old-page {
    return 301 /new-page;
}
````````````````````````````````````````````````````````````````````

 3Ô∏è‚É£ Rewrite URLs
````````````````````````````````````````````````````````````````````nginx
location /blog/ {
    rewrite ^/blog/(.)$ /newblog/$1 redirect;
}
````````````````````````````````````````````````````````````````````

 4Ô∏è‚É£ Reverse Proxy
````````````````````````````````````````````````````````````````````nginx
location /api/ {
    proxy_pass http://backend_server;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
}
````````````````````````````````````````````````````````````````````
 üìå Advanced `location` Directive Examples üöÄ  

Below are advanced configurations using `location` directives for regex matching, authentication, and load balancing in Nginx.

_______________________________________________________________________________________________________________________________________

 üîπ 1Ô∏è‚É£ Regex Matching in `location`
Nginx allows regular expressions (regex) in `location` blocks for flexible URL handling.

 üî∏ Exact File Type Matching (Case-Sensitive)
````````````````````````````````````````````````````````````````````nginx
location ~ \.(jpg|jpeg|png|gif|ico)$ {
    root /var/www/images;
    expires 30d;
}
````````````````````````````````````````````````````````````````````
‚úÖ This matches only image files (`.jpg`, `.jpeg`, `.png`, `.gif`, `.ico`) case-sensitively.

_______________________________________________________________________________________________________________________________________

 üî∏ Case-Insensitive File Type Matching
````````````````````````````````````````````````````````````````````nginx
location ~ \.(jpg|jpeg|png|gif|ico|css|js)$ {
    root /var/www/static;
    expires 30d;
}
````````````````````````````````````````````````````````````````````
‚úÖ The `~` modifier makes it case-insensitive, so `FILE.PNG` and `file.png` are both matched.

_______________________________________________________________________________________________________________________________________

 üî∏ Removing `.php` Extensions (Clean URLs)
````````````````````````````````````````````````````````````````````nginx
location ~ ^/app/(.)\.php$ {
    rewrite ^/app/(.)\.php$ /app/$1 break;
}
````````````````````````````````````````````````````````````````````
‚úÖ This removes the `.php` extension from URLs while still serving PHP files.

_______________________________________________________________________________________________________________________________________

 üîπ 2Ô∏è‚É£ Authentication (Basic Auth)
You can protect specific directories using HTTP Basic Authentication.

 üî∏ Enabling Authentication
````````````````````````````````````````````````````````````````````nginx
location /secure/ {
    auth_basic "Restricted Area";
    auth_basic_user_file /etc/nginx/.htpasswd;
}
````````````````````````````````````````````````````````````````````
‚úÖ Users will be prompted for a username and password before accessing `/secure/`.

_______________________________________________________________________________________________________________________________________

 üî∏ Allowing & Denying Access by IP
````````````````````````````````````````````````````````````````````nginx
location /admin/ {
    allow 192.168.1.100;
    allow 10.0.0.0/24;
    deny all;
}
````````````````````````````````````````````````````````````````````
‚úÖ Only specific IPs (`192.168.1.100` and `10.0.0.0/24 subnet`) can access `/admin/`.

_______________________________________________________________________________________________________________________________________

 üîπ 3Ô∏è‚É£ Load Balancing (Reverse Proxy)
Nginx can distribute traffic across multiple backend servers.

 üî∏ Simple Reverse Proxy
````````````````````````````````````````````````````````````````````nginx
location /api/ {
    proxy_pass http://backend_server;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
}
````````````````````````````````````````````````````````````````````
‚úÖ This forwards requests to `http://backend_server`.

_______________________________________________________________________________________________________________________________________

 üî∏ Load Balancing Between Multiple Servers
````````````````````````````````````````````````````````````````````nginx
upstream my_backend {
    server backend1.example.com;
    server backend2.example.com;
}

location /api/ {
    proxy_pass http://my_backend;
}
````````````````````````````````````````````````````````````````````
‚úÖ Requests are distributed across `backend1.example.com` and `backend2.example.com`.

_______________________________________________________________________________________________________________________________________

 üî∏ Load Balancing with Weighted Servers
````````````````````````````````````````````````````````````````````nginx
upstream my_backend {
    server backend1.example.com weight=3;
    server backend2.example.com weight=1;
}

location / {
    proxy_pass http://my_backend;
}
````````````````````````````````````````````````````````````````````
‚úÖ `backend1.example.com` gets 3 times more traffic than `backend2.example.com`.

_______________________________________________________________________________________________________________________________________

 üî∏ Sticky Sessions with IP Hashing
````````````````````````````````````````````````````````````````````nginx
upstream my_backend {
    ip_hash;
    server backend1.example.com;
    server backend2.example.com;
}

location / {
    proxy_pass http://my_backend;
}
````````````````````````````````````````````````````````````````````
‚úÖ Ensures the same user (IP) always connects to the same backend server.

_______________________________________________________________________________________________________________________________________
