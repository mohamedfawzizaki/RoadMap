_______________________________________________________________________________________________________________________________________
                                          üîπ Event Block in Nginx (`events {}`)

The `events` block in Nginx controls how connections are handled at a low level. 
It defines how many clients can connect at the same time and how those connections are distributed across worker processes.

_______________________________________________________________________________________________________________________________________
                                        üìå Key Directives in the `events` Block  

|     Directive         |                              Description 
| `worker_connections`  | Defines the maximum number of simultaneous connections per worker process. 
| `use`                 | Specifies the event-driven connection handling method (e.g., `epoll`, `kqueue`). 
| `multi_accept`        | Enables a worker to accept multiple connections at once. 
| `accept_mutex`        | Ensures connections are evenly distributed across workers. 
| `accept_mutex_delay`  | Controls how long a worker waits before trying to accept a connection. 
| `debug_connection`    | Logs debugging information for specific IPs. 

_______________________________________________________________________________________________________________________________________
                                           üîπ Explanation of Each Directive  

 1Ô∏è‚É£ `worker_connections` (Max Connections per Worker)
- Defines how many concurrent connections each worker can handle.
- The total number of connections depends on the number of workers:  
  Total Max Connections = worker_processes √ó worker_connections
- Example:
  ````````````````````````````````````````````````````````````````````nginx
  events {
      worker_connections 1024;  # Each worker can handle up to 1024 connections
  }
  ````````````````````````````````````````````````````````````````````
- If `worker_processes 4;`, then max connections = 4 √ó 1024 = 4096.

_______________________________________________________________________________________________________________________________________

 2Ô∏è‚É£ `use` (Event Processing Method)
- Specifies which event-driven model to use.
- Different OS uses different methods:
      - `epoll`   ‚Üí Linux (best for high performance)
      - `kqueue`  ‚Üí BSD/macOS
      - `select`  ‚Üí Older systems (not efficient)
      - `poll`    ‚Üí Unix-based systems
- Example:
  ````````````````````````````````````````````````````````````````````nginx
  events {
      use epoll;
  }
  ````````````````````````````````````````````````````````````````````
- Best practice: Let Nginx auto-select by omitting this directive.

_______________________________________________________________________________________________________________________________________

 3Ô∏è‚É£ `multi_accept` (Accept Multiple Connections at Once)
- If enabled, a worker accepts as many connections as possible at the same time.
- Improves performance but can overload the server if not configured properly.
- Example:
  ````````````````````````````````````````````````````````````````````nginx
  events {
      multi_accept on;
  }
  ````````````````````````````````````````````````````````````````````

_______________________________________________________________________________________________________________________________________

 4Ô∏è‚É£ `accept_mutex` (Load Balancing Between Workers)
- Controls how connections are distributed among workers.
- When enabled (`on`):
  - Prevents multiple workers from trying to accept the same connection.
  - Useful in high-traffic environments for even load balancing.
- When disabled (`off`):
  - Workers accept connections independently.
  - Can improve performance but may cause imbalance.
- Example:
  ````````````````````````````````````````````````````````````````````nginx
  events {
      accept_mutex on;  # Enable connection balancing
  }
  ````````````````````````````````````````````````````````````````````

_______________________________________________________________________________________________________________________________________

 5Ô∏è‚É£ `accept_mutex_delay` (Wait Time Before Accepting a Connection)
- If `accept_mutex` is enabled, this directive controls how long a worker waits before trying to accept a connection.
- Default: 500ms.
- Lower values = Faster handling, but possible CPU overhead.
- Example:
  ````````````````````````````````````````````````````````````````````nginx
  events {
      accept_mutex on;
      accept_mutex_delay 100ms;  # Delay reduced for faster response
  }
  ````````````````````````````````````````````````````````````````````

_______________________________________________________________________________________________________________________________________

 6Ô∏è‚É£ `debug_connection` (Debugging Specific IPs)
- Used for troubleshooting Nginx connection handling.
- Logs detailed connection debugging information from specific IPs.
- Example:
  ````````````````````````````````````````````````````````````````````nginx
  events {
      debug_connection 192.168.1.100;
  }
  ````````````````````````````````````````````````````````````````````
- Logs will appear in `/var/log/nginx/error.log`.

_______________________________________________________________________________________________________________________________________
                                            üîπ Full Example: Optimized `events` Block

````````````````````````````````````````````````````````````````````nginx
events {
    worker_connections 4096;          # Handle up to 4096 clients per worker
    use epoll;                        # Best method for Linux
    multi_accept on;                  # Accept multiple connections at once
    accept_mutex on;                  # Ensure even load distribution
    accept_mutex_delay 100ms;         # Short delay for fast response
    debug_connection 192.168.1.100;   # Debugging for specific IP
}
````````````````````````````````````````````````````````````````````

_______________________________________________________________________________________________________________________________________
                                                          üîπ Summary

‚úÖ The `events` block fine-tunes connection handling for efficiency.  
‚úÖ High-performance tuning depends on `worker_connections`, `multi_accept`, and `accept_mutex`.  
‚úÖ Use `epoll` (Linux) or `kqueue` (macOS/BSD) for best performance.  
‚úÖ Balance between faster connections (`multi_accept on`) and even load distribution (`accept_mutex on`).  

_______________________________________________________________________________________________________________________________________