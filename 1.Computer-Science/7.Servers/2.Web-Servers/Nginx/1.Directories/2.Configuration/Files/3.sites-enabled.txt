_______________________________________________________________________________________________________________________________________
                            üîπ Understanding `/etc/nginx/sites-enabled/` Directory  

 1Ô∏è‚É£ What is `/etc/nginx/sites-enabled/`?  
The `/etc/nginx/sites-enabled/` directory is used in Debian-based distributions (e.g., Ubuntu) for managing virtual hosts. 
It contains symbolic links to configuration files stored in `/etc/nginx/sites-available/`.

üîπ Purpose:  
- Enables or disables websites without modifying Nginx's main configuration (`nginx.conf`).
- Uses symlinks (`ln -s`) instead of copying files.
- Keeps the `/etc/nginx/conf.d/` directory clean for general settings.

üîπ Default Behavior:  
- Nginx loads only configurations from `/etc/nginx/sites-enabled/` if the `include` directive exists in `nginx.conf`:  
  ````````````````````````````````````````````````````````````````````nginx
  include /etc/nginx/sites-enabled/;
  ````````````````````````````````````````````````````````````````````

_______________________________________________________________________________________________________________________________________

 2Ô∏è‚É£ Directory Structure
A typical Nginx virtual host setup:  
````````````````````````````````````````````````````````````````````
/etc/nginx/
‚îú‚îÄ‚îÄ nginx.conf              # Main Nginx configuration
‚îú‚îÄ‚îÄ sites-available/        # Stores all virtual host configs
‚îÇ   ‚îú‚îÄ‚îÄ example.com         # Configuration for example.com
‚îÇ   ‚îú‚îÄ‚îÄ api.example.com     # API subdomain configuration
‚îÇ   ‚îú‚îÄ‚îÄ old-site.conf       # Disabled site (not linked)
‚îÇ   ‚îú‚îÄ‚îÄ test.conf           # Disabled test site
‚îÇ
‚îú‚îÄ‚îÄ sites-enabled/          # Contains only active sites (linked from sites-available)
‚îÇ   ‚îú‚îÄ‚îÄ example.com     -> /etc/nginx/sites-available/example.com
‚îÇ   ‚îú‚îÄ‚îÄ api.example.com -> /etc/nginx/sites-available/api.example.com
‚îÇ
‚îî‚îÄ‚îÄ conf.d/                     # Stores general settings (gzip, proxy, security, etc.)
‚îÇ   ‚îú‚îÄ‚îÄ example.com.conf        # Virtual host for example.com
‚îÇ   ‚îú‚îÄ‚îÄ api.example.com.conf    # API-specific configuration
‚îÇ   ‚îú‚îÄ‚îÄ security.conf           # Security rules
‚îÇ   ‚îú‚îÄ‚îÄ gzip.conf               # Gzip compression settings
‚îÇ   ‚îî‚îÄ‚îÄ proxy.conf              # Reverse proxy settings
‚îú‚îÄ‚îÄ modules-available/       # Stores all module configuration files
‚îÇ   ‚îú‚îÄ‚îÄ 50-mod-http-geoip.conf
‚îÇ   ‚îú‚îÄ‚îÄ 50-mod-http-headers-more.conf
‚îÇ   ‚îú‚îÄ‚îÄ 50-mod-stream.conf
‚îÇ
‚îú‚îÄ‚îÄ modules-enabled/         # Contains only enabled modules (symlinks to modules-available)
‚îÇ   ‚îú‚îÄ‚îÄ 50-mod-http-geoip.conf -> /etc/nginx/modules-available/50-mod-http-geoip.conf
‚îÇ   ‚îú‚îÄ‚îÄ 50-mod-http-headers-more.conf -> /etc/nginx/modules-available/50-mod-http-headers-more.conf
````````````````````````````````````````````````````````````````````

_______________________________________________________________________________________________________________________________________

 3Ô∏è‚É£ Virtual Host Configuration Example (`sites-available/example.com`)
A basic configuration for a website:
````````````````````````````````````````````````````````````````````nginx
server {
    listen 80;
    server_name example.com www.example.com;

    root /var/www/example;
    index index.html index.htm;

    access_log /var/log/nginx/example.com.access.log;
    error_log /var/log/nginx/example.com.error.log warn;

    location / {
        try_files $uri $uri/ =404;
    }
}
````````````````````````````````````````````````````````````````````
üîπ Breakdown:
- Listens on port 80.
- Serves files from `/var/www/example/`.
- Logs access and errors.
- Handles missing pages with `404 Not Found`.

_______________________________________________________________________________________________________________________________________

 4Ô∏è‚É£ Enabling & Disabling Sites
| Action                            | Command 
| Enable a site (create a symlink)  | `sudo ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/` 
| Disable a site (remove symlink)   | `sudo rm /etc/nginx/sites-enabled/example.com` 
| Reload Nginx after changes        | `sudo systemctl reload nginx` 
| Test configuration before reload  | `sudo nginx -t` 

üîπ Example:
````````````````````````````````````````````````````````````````````bash
# Enable site
sudo ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/

# Disable site
sudo rm /etc/nginx/sites-enabled/example.com

# Apply changes
sudo systemctl reload nginx
````````````````````````````````````````````````````````````````````

_______________________________________________________________________________________________________________________________________

 5Ô∏è‚É£ Managing Multiple Virtual Hosts
For multiple websites, create separate files in `sites-available/`, enable them, and reload Nginx.

# üåê Example: `/etc/nginx/sites-available/api.example.com`
````````````````````````````````````````````````````````````````````nginx
server {
    listen 80;
    server_name api.example.com;

    location / {
        proxy_pass http://127.0.0.1:5000;  # Backend service
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}
````````````````````````````````````````````````````````````````````
üîπ Steps to enable this API site:
````````````````````````````````````````````````````````````````````bash
sudo ln -s /etc/nginx/sites-available/api.example.com /etc/nginx/sites-enabled/
sudo systemctl reload nginx
````````````````````````````````````````````````````````````````````

_______________________________________________________________________________________________________________________________________

 6Ô∏è‚É£ Differences: `sites-available/` vs `sites-enabled/`
| Directory                     | Purpose 
| `/etc/nginx/sites-available/` | Stores all virtual host configurations (active & inactive). 
| `/etc/nginx/sites-enabled/`   | Contains only active sites (symbolic links to `sites-available/`). 

_______________________________________________________________________________________________________________________________________

 7Ô∏è‚É£ Troubleshooting Common Issues
| Issue                                 | Possible Cause                                        |   Solution 
| `nginx: [emerg] duplicate listen 80`  | Two virtual hosts listen on `80` without server_name. | Ensure each virtual host has a unique `server_name`. 
| `403 Forbidden`                       | Wrong permissions on the web root.                    | Run: `chmod -R 755 /var/www/example` 
| `502 Bad Gateway`                     | Backend service is down.                              | Restart the backend: `sudo systemctl restart myapp` 
| `404 Not Found`                       | Wrong `root` path or missing files.                   | Verify the `root` directory and test with `nginx -t`. 

_______________________________________________________________________________________________________________________________________

 8Ô∏è‚É£ Summary
- `/etc/nginx/sites-available/` stores all virtual host configurations.
- `/etc/nginx/sites-enabled/` contains symlinks to active configurations.
- Use `ln -s` to enable a site and `rm` to disable a site.
- Always reload Nginx (`systemctl reload nginx`) after making changes.

_______________________________________________________________________________________________________________________________________