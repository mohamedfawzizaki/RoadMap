___________________________________________________________________________________________________________________________________________________________________________________________________
                                                        Vagrant
                                                        =======
                                  Docs :  https://developer.hashicorp.com/vagrant/docs
                                  Discover Vagrant Boxes :  https://portal.cloud.hashicorp.com/vagrant/discover
___________________________________________________________________________________________________________________________________________________________________________________________________
                                                    What is Vagrant?

Vagrant is a tool for managing development environments.
It leverages virtual machines (VMs) or containers to provide a consistent
 development setup across all team members, reducing discrepancies like the infamous "it works on my machine" problem.
 
Vagrant is highly customizable, scalable, and works with multiple providers like VirtualBox, Docker, AWS, and VMware.

Key Components of Vagrant:
___________________________________________________________________________________________________________________________________________________________________________________________________
                                                      1.Vagrantfile

- A Ruby-based configuration file used to define the VM.
- Contains all the settings for:
  - Provider configuration.
  - VM specifications (CPU, memory, etc.).
  - Networking and synced folders.
  - Provisioning scripts or tools.

Example `Vagrantfile`:
          ````````````````````````````````````````ruby
          Vagrant.configure("2") do |config|
            # Define the base box
            config.vm.box = "ubuntu/bionic64"

            # Configure VM resources
            config.vm.provider "virtualbox" do |vb|
              vb.name = "My VM"
              vb.memory = "2048"
              vb.cpus = 2
            end

            # Configure networking
            config.vm.network "private_network", type: "dhcp"

            # Define a synced folder
            config.vm.synced_folder "./app", "/var/www/app"

            # Add provisioning with a shell script
            config.vm.provision "shell", inline: <<-SHELL
              apt-get update
              apt-get install -y nginx
            SHELL
          end
          ````````````````````````````````````````

- `config.vm.box`          : Specifies the base image (e.g., Ubuntu, CentOS, etc.).
- `config.vm.provider`     : Customizes settings for the virtualization provider.
- `config.vm.network`      : Configures networking for the VM (private/public networks or port forwarding).
- `config.vm.synced_folder`: Synchronizes folders between the host and VM.
- `config.vm.provision`    : Automates software installation or configuration inside the VM.

___________________________________________________________________________________________________________________________________________________________________________________________________
                                                      2.Providers

Providers are backends that Vagrant uses to create and manage environments.

Some popular providers include:

- VirtualBox (default): Free and open-source.
- VMware              : Paid, high performance.
- Docker              : Lightweight containers instead of full VMs.
- Hyper-V             : Windows-native hypervisor.
- AWS, Azure, Google  : For cloud-based VMs.

Provider Configuration Example:
          ````````````````````````````````````````ruby
          config.vm.provider "virtualbox" do |vb|
            vb.name = "DevEnvironment"
            vb.memory = 4096
            vb.cpus = 4
          end
          ````````````````````````````````````````

___________________________________________________________________________________________________________________________________________________________________________________________________
                                                      3.Boxes
- A "box" is a prepackaged virtual environment (base image) used as a starting point for Vagrant VMs.
- Examples: `ubuntu/bionic64`, `hashicorp/precise64`.
- Boxes are downloaded from [Vagrant Cloud](https://app.vagrantup.com/).

Commands to Manage Boxes:
          ````````````````````````````````````````bash
          vagrant box add ubuntu/bionic64       Add a box
          vagrant box list                      List installed boxes
          vagrant box remove ubuntu/bionic64    Remove a box
          ````````````````````````````````````````

___________________________________________________________________________________________________________________________________________________________________________________________________
                                                    4.Provisioners
Provisioners are tools or scripts that configure the VM after it’s created.

These include:

- Shell Scripts (Inline or external):
          
          # Use internal provisioning scripts:
          ````````````````````````````````````````ruby
          config.vm.provision "shell", inline: <<-SHELL
            apt-get update
            apt-get install -y apache2
          SHELL
          ````````````````````````````````````````
          config.vm.provision "shell", inline: "apt-get update && apt-get install -y nginx"
          ````````````````````````````````````````

          # Use external provisioning scripts:
          ````````````````````````````````````````ruby
          config.vm.provision "shell", path: "setup.sh"
          ````````````````````````````````````````

- Ansible:
          ````````````````````````````````````````ruby
          config.vm.provision "ansible" do |ansible|
            ansible.playbook = "playbook.yml"
          end
          ````````````````````````````````````````

- Puppet/Chef: For advanced configuration management.

___________________________________________________________________________________________________________________________________________________________________________________________________
                                                    5.Networking
Vagrant supports three types of networks:

1.Port Forwarding: Maps ports between the host and VM.
          ````````````````````````````````````````ruby
          config.vm.network "forwarded_port", guest: 80, host: 8080
          ````````````````````````````````````````
          Access the VM’s web server on `localhost:8080`.

2.Private Network: Creates an isolated network (e.g., assign IPs to VMs).
          ````````````````````````````````````````ruby
          config.vm.network "private_network", type: "dhcp"
          ````````````````````````````````````````ruby
          or
          ````````````````````````````````````````ruby
          config.vm.network "private_network", ip: "192.168.33.10"
          ````````````````````````````````````````

3.Public Network: Exposes the VM on the same network as the host.
          ````````````````````````````````````````ruby
          config.vm.network "public_network"
          ````````````````````````````````````````

___________________________________________________________________________________________________________________________________________________________________________________________________
                                                  6.Synced Folders

- Synchronize files between the host and VM for easy development.
- By default, the project folder is synced to `/vagrant` in the VM.

Custom Synced Folder:
          ````````````````````````````````````````ruby
          config.vm.synced_folder "./data", "/home/vagrant/data"
          ````````````````````````````````````````

___________________________________________________________________________________________________________________________________________________________________________________________________
                                                    7.Plugins
Extend Vagrant’s functionality with plugins.

Examples:
- `vagrant-vbguest`: Keeps VirtualBox Guest Additions updated.
- `vagrant-aws`    : Adds AWS provider support.

Install Plugins:
          ````````````````````````````````````````bash
          vagrant plugin install vagrant-vbguest
          ````````````````````````````````````````

___________________________________________________________________________________________________________________________________________________________________________________________________
                                              Lifecycle Commands
                 __________________________________________________________________________________
                |         Command       |                  Description                             |
                |_______________________|__________________________________________________________|
                | `vagrant init`        | Creates a `Vagrantfile`.                                 |
                | `vagrant up`          | Starts the VM.                                           |
                | `vagrant halt`        | Stops the VM.                                            |
                | `vagrant destroy`     | Deletes the VM.                                          |
                | `vagrant reload`      | Restarts the VM and applies changes in the `Vagrantfile`.|
                | `vagrant ssh`         | Logs into the VM via SSH.                                |
                | `vagrant provision`   | Re-runs provisioning scripts.                            |
                | `vagrant status`      | Shows the current state of the VM.                       |
                |_______________________|__________________________________________________________|

___________________________________________________________________________________________________________________________________________________________________________________________________
                                               Advanced Topics
---------------------------------------------------------------------------------------------
1.Multi-Machine Environments
    Useful for simulating clusters or multi-tier applications.
          ````````````````````````````````````````ruby
          Vagrant.configure("2") do |config|
            config.vm.define "web" do |web|
              web.vm.box = "ubuntu/bionic64"
              web.vm.network "private_network", ip: "192.168.33.10"
            end

            config.vm.define "db" do |db|
              db.vm.box = "ubuntu/bionic64"
              db.vm.network "private_network", ip: "192.168.33.11"
            end
          end
          ````````````````````````````````````````

---------------------------------------------------------------------------------------------
2.Custom Scripts
    Use external provisioning scripts:
          ````````````````````````````````````````ruby
          config.vm.provision "shell", path: "setup.sh"
          ````````````````````````````````````````

---------------------------------------------------------------------------------------------
3.Environment Variables
    Pass environment variables to the VM:
          ````````````````````````````````````````ruby
          config.vm.provision "shell", inline: <<-SHELL
            export APP_ENV=development
            echo $APP_ENV
          SHELL
          ````````````````````````````````````````

---------------------------------------------------------------------------------------------
4.Cloud Integration
    Use plugins like `vagrant-aws` or `vagrant-google` to deploy on cloud platforms:
           "vagrant plugin install vagrant-aws"
          ````````````````````````````````````````ruby
          Vagrant.configure("2") do |config|
            config.vm.provider "aws" do |aws|
              aws.access_key_id = "ACCESS_KEY"
              aws.secret_access_key = "SECRET_KEY"
              aws.region = "us-east-1"
            end
          end
          ````````````````````````````````````````
---------------------------------------------------------------------------------------------

___________________________________________________________________________________________________________________________________________________________________________________________________
                                                  Troubleshooting
1.Common Issues:
   - VM doesn’t start     : Ensure the provider (e.g., VirtualBox) is installed.
   - Networking conflicts : Check for IP conflicts or firewalls.
   - Plugin errors        : Update plugins (`vagrant plugin update`).

2.Logs:
   - Run commands with `--debug` for detailed logs:
          ````````````````````````````````````````bash
          vagrant up --debug
          ````````````````````````````````````````

___________________________________________________________________________________________________________________________________________________________________________________________________

Vagrant is a powerful tool for development and testing environments
___________________________________________________________________________________________________________________________________________________________________________________________________