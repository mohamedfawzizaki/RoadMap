___________________________________________________________________________________________________________________________________________________________________________________________________
                                                        Vagrantfile 
                                                        ===========

The Vagrantfile is the configuration file used by Vagrant to define and manage virtual machine environments.
It is written in Ruby and serves as a blueprint for Vagrant to understand how to configure and provision the VMs.

Structure of a Vagrantfile:
    A typical Vagrantfile consists of several sections, each configuring different aspects of the virtual environment:
___________________________________________________________________________________________________________________________________________________________________________________________________
                                                     1.Basic Structure
     
          ````````````````````````````````````````ruby
          Vagrant.configure("2") do |config|
            config.vm.box = "ubuntu/bionic64"
          end
          ````````````````````````````````````````
- `Vagrant.configure("2")`: Indicates the configuration version.Version `2` is the most common and stable.
- `config`                : A configuration object used to set up the environment.
- `config.vm.box`         : Specifies the base box to use.

___________________________________________________________________________________________________________________________________________________________________________________________________
                                                    2.Configurable Options
---------------------------------------------------------------------------------------------------------------------
A.Virtual Machine Settings
            ````````````````````````````````````````ruby
            config.vm.box = "ubuntu/bionic64"         The base box image.
            config.vm.hostname = "my-vm"             The hostname for the virtual machine.
            config.vm.box_version = ">= 20211018"    Optional: Specify a version constraint for the box.
            config.vm.box_url = "url/to/custom.box"  Optional: URL to a custom box.
            ````````````````````````````````````````

---------------------------------------------------------------------------------------------------------------------
B.Networking
            ````````````````````````````````````````ruby
            config.vm.network "forwarded_port", guest: 80, host: 8080   Port forwarding (Host 8080 â†’ Guest 80).
            config.vm.network "private_network", ip: "192.168.33.10"   Private network with static IP.
            config.vm.network "public_network"                         Bridge the guest network with the host's network.
            ````````````````````````````````````````

---------------------------------------------------------------------------------------------------------------------
C.Synced Folders
            ````````````````````````````````````````ruby
            config.vm.synced_folder "./data", "/vagrant_data"   Sync the local folder to the VM.
            config.vm.synced_folder "./app", "/app", type: "nfs"   Use NFS for faster performance.
            ````````````````````````````````````````

---------------------------------------------------------------------------------------------------------------------
D.Provider Settings

You can specify settings for providers like VirtualBox, VMware, Docker, etc.

 For VirtualBox
            ````````````````````````````````````````ruby
            config.vm.provider "virtualbox" do |vb|
              vb.memory = "1024"   Allocate 1GB of RAM to the VM.
              vb.cpus = 2          Allocate 2 CPUs.
              vb.name = "my-vm"    Name the VM in the VirtualBox GUI.
            end
            ````````````````````````````````````````

 For Docker
            ````````````````````````````````````````ruby
            config.vm.provider "docker" do |docker|
              docker.image = "nginx:latest"   Use an NGINX Docker image.
              docker.has_ssh = false          No need for SSH.
            end
            ````````````````````````````````````````

---------------------------------------------------------------------------------------------------------------------
E.Provisioning

Provisioning automates the setup process, such as installing software or running scripts.

 Shell Provisioning
            ````````````````````````````````````````ruby
            config.vm.provision "shell", inline: <<-SHELL
              sudo apt-get update
              sudo apt-get install -y apache2
            SHELL
            ````````````````````````````````````````

 Ansible Provisioning
            ````````````````````````````````````````ruby
            config.vm.provision "ansible" do |ansible|
              ansible.playbook = "playbook.yml"
            end
            ````````````````````````````````````````

 Puppet Provisioning
            ````````````````````````````````````````ruby
            config.vm.provision "puppet" do |puppet|
              puppet.manifest_file = "default.pp"
            end
            ````````````````````````````````````````

---------------------------------------------------------------------------------------------------------------------
F.Multi-Machine Setup

Define multiple virtual machines in one Vagrantfile.
            ````````````````````````````````````````ruby
            Vagrant.configure("2") do |config|
              config.vm.define "web" do |web|
                web.vm.box = "ubuntu/bionic64"
                web.vm.network "private_network", ip: "192.168.33.10"
              end

              config.vm.define "db" do |db|
                db.vm.box = "ubuntu/bionic64"
                db.vm.network "private_network", ip: "192.168.33.11"
              end
            end
            ````````````````````````````````````````

---------------------------------------------------------------------------------------------------------------------
G.Environment Variables

Pass environment variables to the VM.
            ````````````````````````````````````````ruby
            config.vm.provision "shell", inline: <<-SHELL
              echo "ENV_VAR=$ENV_VAR" >> /etc/environment
            SHELL, env: { ENV_VAR: "value" }
            ````````````````````````````````````````

H.Custom Scripts

Run external shell scripts during provisioning.
            ````````````````````````````````````````ruby
            config.vm.provision "shell", path: "scripts/setup.sh"
            ````````````````````````````````````````
---------------------------------------------------------------------------------------------------------------------
___________________________________________________________________________________________________________________________________________________________________________________________________
                                              Complete Example Vagrantfile
Below is a comprehensive example:

````````````````````````````````````````````````````````````````````````````````````````ruby
Vagrant.configure("2") do |config|
   Base Box
  config.vm.box = "ubuntu/bionic64"
  
   Hostname
  config.vm.hostname = "example-vm"

   Networking
  config.vm.network "forwarded_port", guest: 80, host: 8080
  config.vm.network "private_network", ip: "192.168.33.10"

   Synced Folder
  config.vm.synced_folder "./src", "/var/www/html"

   Provider Configuration
  config.vm.provider "virtualbox" do |vb|
    vb.name = "example-vm"
    vb.memory = "2048"
    vb.cpus = 2
  end

   Provisioning
  config.vm.provision "shell", inline: <<-SHELL
    sudo apt-get update
    sudo apt-get install -y apache2
    echo "<h1>Hello, Vagrant!</h1>" > /var/www/html/index.html
  SHELL
end
````````````````````````````````````````````````````````````````````````````````````````````
___________________________________________________________________________________________________________________________________________________________________________________________________
                                                 Best Practices

1.Keep the Vagrantfile Modular   : Use environment-specific overrides to handle different setups.
2.Provisioning Over Base Boxes   : Avoid bloating the Vagrantfile with unnecessary installations; use provisioning instead.
3.Version-Control the Vagrantfile: Keep it in your repository to ensure consistency across teams.
4.Dynamic Configuration          : Use Ruby programming features for dynamic configurations, such as loops for multi-machine setups.
___________________________________________________________________________________________________________________________________________________________________________________________________