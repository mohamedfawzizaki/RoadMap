In **Vagrant**, you can define and use **variables in your `Vagrantfile`** to make it more dynamic and reusable.

---

## ‚úÖ Basic Example: Using Variables in a Vagrantfile

```ruby
# Define variables
vm_name = "web-server"
box_name = "ubuntu/bionic64"
ip_address = "192.168.56.10"
cpus = 2
memory = 1024

Vagrant.configure("2") do |config|
  config.vm.define vm_name do |web|
    web.vm.box = box_name
    web.vm.network "private_network", ip: ip_address
    web.vm.provider "virtualbox" do |vb|
      vb.name = vm_name
      vb.memory = memory
      vb.cpus = cpus
    end
  end
end
```

---

## üõ†Ô∏è Where You Can Use Variables

| Part of `Vagrantfile` | Can Use Variables? | Example                    |
| --------------------- | ------------------ | -------------------------- |
| Box name              | ‚úÖ                  | `web.vm.box = box_name`    |
| Network configuration | ‚úÖ                  | `ip: ip_address`           |
| Provider settings     | ‚úÖ                  | `vb.memory = memory`       |
| Folder sync paths     | ‚úÖ                  | `config.vm.synced_folder`  |
| Multiple VMs          | ‚úÖ                  | Looping through VM configs |

---

## üîÅ Example: Multiple VMs Using a Loop with Variables

```ruby
nodes = [
  { name: "app1", ip: "192.168.56.11" },
  { name: "app2", ip: "192.168.56.12" }
]

Vagrant.configure("2") do |config|
  nodes.each do |node|
    config.vm.define node[:name] do |vm|
      vm.vm.box = "ubuntu/bionic64"
      vm.vm.hostname = node[:name]
      vm.vm.network "private_network", ip: node[:ip]
    end
  end
end
```

---

## üì¶ Bonus: Environment Variables (from shell)

You can pass in variables via environment when running `vagrant up`:

### Shell

```bash
export VM_CPUS=2
vagrant up
```

### Vagrantfile

```ruby
cpus = ENV.fetch("VM_CPUS", "1").to_i

Vagrant.configure("2") do |config|
  config.vm.provider "virtualbox" do |vb|
    vb.cpus = cpus
  end
end
```

---

## üìå Summary

* Use Ruby variables for flexibility and cleaner config.
* Use environment variables for external customization.
* You can loop through host definitions or manage conditionals easily with Ruby.
