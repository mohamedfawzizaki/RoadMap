_________________________________________________________________________________________________________________________________________________
                                                      To-Document-Terraform
                                                      =====================

 `provisioner` Block in Terraform

The `provisioner` block in Terraform is used to execute scripts or commands on a resource after it has been created.This is particularly useful for automating setup tasks like installing software, configuring services, or running custom scripts on the virtual machine or instance.

 Description:
- Purpose: The `provisioner` block allows you to run commands or scripts on your resources, typically after the resource has been created but before it is considered "ready" or fully operational.
- Types of Provisioners: There are different types of provisioners you can use, including `remote-exec` (to run commands on the remote machine) and `local-exec` (to run commands locally on the machine where Terraform is being executed).
- Scope: Provisioners are executed after the resource has been created and are typically used for configuration management and software installation.
- Immutability: The use of provisioners is generally discouraged in Terraform because they break the declarative nature of Terraform and are considered a workaround.Terraform's goal is to manage infrastructure as code without needing imperative steps.

 Syntax:
````````````````````````````````````````````````````````````````````hcl
resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"

  provisioner "remote-exec" {
    inline = [
      "sudo apt-get update",
      "sudo apt-get install -y nginx"
    ]
  }

  provisioner "local-exec" {
    command = "echo 'Provisioning complete!'"
  }
}
````````````````````````````````````````````````````````````````````

 Types of Provisioners:

1.`remote-exec` Provisioner:
   - Executes commands on the remote resource over SSH or WinRM.
   - Commonly used for tasks like configuring software or services.
   
   Example:
   ````````````````````````````````````````````````````````````````````hcl
   resource "aws_instance" "example" {
     ami           = "ami-0c55b159cbfafe1f0"
     instance_type = "t2.micro"

     provisioner "remote-exec" {
       inline = [
         "sudo apt-get update",
         "sudo apt-get install -y nginx"
       ]
     }
   }
   ````````````````````````````````````````````````````````````````````

   - Arguments for `remote-exec`:
     - `inline` (array of strings): A list of commands to execute on the remote machine.
     - `script` (string): Path to a script file that will be executed on the remote machine.
     - Example with `script`:
       ````````````````````````````````````````````````````````````````````hcl
       provisioner "remote-exec" {
         script = "./setup.sh"
       }
       ````````````````````````````````````````````````````````````````````

2.`local-exec` Provisioner:
   - Executes commands on the local machine (where Terraform is running), not the remote resource.
   - Often used to trigger local actions, like interacting with APIs or running external scripts that don’t need to be executed on the remote resource.

   Example:
   ````````````````````````````````````````````````````````````````````hcl
   resource "aws_instance" "example" {
     ami           = "ami-0c55b159cbfafe1f0"
     instance_type = "t2.micro"

     provisioner "local-exec" {
       command = "echo 'Provisioning complete!'"
     }
   }
   ````````````````````````````````````````````````````````````````````

   - Arguments for `local-exec`:
     - `command` (string): A command to run locally.
     - `script` (string): Path to a local script to execute.

3.`file` Provisioner:
   - Uploads files from the local machine to the remote machine.This is useful for deploying configuration files, scripts, or other resources to your instance.
   
   Example:
   ````````````````````````````````````````````````````````````````````hcl
   resource "aws_instance" "example" {
     ami           = "ami-0c55b159cbfafe1f0"
     instance_type = "t2.micro"

     provisioner "file" {
       source      = "./setup.sh"
       destination = "/tmp/setup.sh"
     }

     provisioner "remote-exec" {
       inline = ["chmod +x /tmp/setup.sh", "/tmp/setup.sh"]
     }
   }
   ````````````````````````````````````````````````````````````````````

   - Arguments for `file`:
     - `source` (string): Path to the local file to copy.
     - `destination` (string): Path on the remote machine where the file will be copied to.

 Use Cases for Provisioners:
1.Software Installation:
   Provisioners can be used to install software like web servers, databases, or configuration management tools.
   
2.Configuration Management:
   Provisioners can configure resources post-creation, such as setting environment variables or configuring system settings.
   
3.File Uploading:
   Copying configuration files or scripts to the remote machine for execution.

4.Custom Initialization:
   When custom steps need to be performed after the resource is created (e.g., initializing an application or database).

 Best Practices and Considerations:
- Avoid Overuse of Provisioners: Terraform's declarative approach does not require imperative actions like provisioning steps.The goal should be to avoid using provisioners when possible and instead use configuration management tools like Ansible, Chef, or Puppet.
  
- Idempotency: Provisioners should ideally be idempotent, meaning they can be safely run multiple times without causing undesirable effects.However, since Terraform cannot guarantee this, external tools are often preferred.

- Error Handling: If a provisioner fails, Terraform will mark the resource as not created, and any changes will need to be manually addressed.For instance, `remote-exec` errors could result in incomplete configurations if the provisioning script fails.

- Resource Lifecycle: Provisioners are executed every time Terraform applies changes to the resource, even if there are no changes to the resource itself.You may want to limit when provisioners are executed using the `when` argument.

 Arguments for `provisioner` Block (Common Across Types):
- `when` (string): Specifies when the provisioner should run.Valid values are:
  - `create` (default) – Runs only when the resource is created.
  - `destroy` – Runs only when the resource is destroyed.
  - `always` – Runs every time the resource changes.

  Example:
  ````````````````````````````````````````````````````````````````````hcl
  provisioner "remote-exec" {
    when = "create"
    inline = ["echo 'Setting up server'"]
  }
  ````````````````````````````````````````````````````````````````````

- `on_failure` (string): Specifies what to do if the provisioner fails.Valid values are:
  - `continue` (default) – Ignore the error and continue the apply.
  - `fail` – Stop the apply process if the provisioner fails.

  Example:
  ````````````````````````````````````````````````````````````````````hcl
  provisioner "remote-exec" {
    on_failure = "fail"
    inline = ["echo 'Setting up server'"]
  }
  ````````````````````````````````````````````````````````````````````

 Example with Multiple Provisioners:
````````````````````````````````````````````````````````````````````hcl
resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"

  provisioner "file" {
    source      = "./setup.sh"
    destination = "/tmp/setup.sh"
  }

  provisioner "remote-exec" {
    inline = [
      "chmod +x /tmp/setup.sh",
      "/tmp/setup.sh"
    ]
  }

  provisioner "local-exec" {
    command = "echo 'Instance setup completed locally!'"
  }
}
````````````````````````````````````````````````````````````````````

 Conclusion:
- Provisioners in Terraform are useful for automating setup tasks post-resource creation.
- They help with tasks like software installation, configuration management, and file uploads, but should be used with caution.
- For long-term infrastructure management, consider using dedicated tools like Ansible or Puppet for provisioning instead of relying on Terraform’s provisioners.
_________________________________________________________________________________________________________________________________________________

