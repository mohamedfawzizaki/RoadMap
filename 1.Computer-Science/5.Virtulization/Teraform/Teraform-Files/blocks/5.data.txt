_________________________________________________________________________________________________________________________________________________
                                                      To-Document-Terraform
                                                      =====================

The `data` block in Terraform is used to retrieve or fetch
 information from an external source without creating or modifying resources.
 
It serves as a way to query data that is already available,
 such as existing infrastructure details, outputs from other configurations, or provider-specific data.

_________________________________________________________________________________________________________________________________________________
                                                 Key Features of the `data` Block
 _______________________________________________________________________________________________________________________
|      Feature        |                                     Description                                                 |
|_____________________|_________________________________________________________________________________________________|
| Data Source         | The specific source from which data is fetched (e.g., `aws_ami`, `azurerm_resource_group`).     |
| Arguments           | Input parameters required by the data source to perform the query.                              |
| Read-Only Nature    | `data` blocks do not create or modify resources; they only fetch information.                   |
| Dynamic Usage       | Often used in conjunction with `resource` blocks to dynamically pass values.                    |
|_____________________|_________________________________________________________________________________________________|

_________________________________________________________________________________________________________________________________________________
                                                  Structure of a `data` Block

# Basic Syntax:
````````````````````````````````````````````````````````````````````hcl
data "<PROVIDER>_<DATA_SOURCE>" "<NAME>" {
  <ARGUMENTS>
}
````````````````````````````````````````````````````````````````````

- `PROVIDER`: The provider name (e.g., `aws`, `azurerm`, `google`).
- `DATA_SOURCE`: The specific data source (e.g., `aws_ami`, `azurerm_resource_group`).
- `NAME`: A unique identifier for the data block.
- `ARGUMENTS`: Input parameters required for the query.

_________________________________________________________________________________________________________________________________________________
                                                     Example Use Cases

-----------------------------------------------------------------------------------------------------------------------------
# 1.Fetch the Latest AWS AMI
````````````````````````````````````````````````````````````````````hcl
data "aws_ami" "latest_ami" {
  most_recent = true
  owners      = ["amazon"]
  filter {
    name   = "name"
    values = ["amzn2-ami-hvm--x86_64-gp2"]
  }
}

resource "aws_instance" "web_server" {
  ami           = data.aws_ami.latest_ami.id
  instance_type = "t2.micro"
}
````````````````````````````````````````````````````````````````````

- The `data` block fetches the most recent Amazon Linux 2 AMI.
- The `aws_instance` resource dynamically uses the fetched AMI.


-----------------------------------------------------------------------------------------------------------------------------
# 2.Fetch an Azure Resource Group
````````````````````````````````````````````````````````````````````hcl
data "azurerm_resource_group" "example" {
  name = "my-resource-group"
}

resource "azurerm_storage_account" "example" {
  name                     = "examplestoracct"
  resource_group_name      = data.azurerm_resource_group.example.name
  location                 = data.azurerm_resource_group.example.location
  account_tier             = "Standard"
  account_replication_type = "LRS"
}
````````````````````````````````````````````````````````````````````

- Retrieves details about an existing Azure Resource Group.
- Passes the `name` and `location` dynamically to create a storage account.

-----------------------------------------------------------------------------------------------------------------------------
# 3.Fetch Google Compute Engine Image
````````````````````````````````````````````````````````````````````hcl
data "google_compute_image" "debian_image" {
  family  = "debian-10"
  project = "debian-cloud"
}

resource "google_compute_instance" "example" {
  name         = "example-instance"
  machine_type = "n1-standard-1"
  zone         = "us-central1-a"

  boot_disk {
    initialize_params {
      image = data.google_compute_image.debian_image.self_link
    }
  }
}
````````````````````````````````````````````````````````````````````

- Retrieves the latest Debian 10 image from Google Compute Engine.
- Uses the fetched image to create a new compute instance.

_________________________________________________________________________________________________________________________________________________
                                                 Components of the `data` Block
                   _______________________________________________________________________________________________________
                  |    Component    |                                     Description                                     |
                  |_________________|_____________________________________________________________________________________|
                  | `data` keyword  | Indicates that the block is a `data` source query.                                  |
                  | `provider`      | The provider from which data is being fetched (e.g., `aws`, `azurerm`, `google`).   |
                  | `data source`   | The specific type of data being queried (e.g., `aws_ami`, `azurerm_resource_group`).|
                  | Arguments       | Inputs to refine the query, such as filters, names, or IDs.                         |
                  | Attributes      | Outputs retrieved from the data source query, such as `id`, `name`, `location`, etc.|
                  |_________________|_____________________________________________________________________________________|

_________________________________________________________________________________________________________________________________________________
                                                Common Data Sources by Provider
                   _______________________________________________________________________________________________
                  | Provider   |    Data Source Example    |                 Description                          |
                  |____________|___________________________|______________________________________________________|
                  | AWS        | `aws_ami`                 | Fetches AMI details.                                 |
                  | Azure      | `azurerm_resource_group`  | Fetches Azure Resource Group details.                |
                  | Google     | `google_compute_image`    | Fetches compute image details from GCP.              |
                  | Kubernetes | `kubernetes_namespace`    | Fetches details of a Kubernetes namespace.           |
                  | HashiCorp  | `terraform_remote_state`  | Retrieves outputs from a remote Terraform state file.|
                  |____________|___________________________|______________________________________________________|

_________________________________________________________________________________________________________________________________________________
                                                      Advanced Examples
-----------------------------------------------------------------------------------------------------------------------------
# 1.Filter AWS AMIs by Multiple Criteria
      ````````````````````````````````````````````````````````````````````hcl
      data "aws_ami" "filtered_ami" {
        most_recent = true
        owners      = ["123456789012"]

        filter {
          name   = "name"
          values = ["custom-ami-"]
        }

        filter {
          name   = "virtualization-type"
          values = ["hvm"]
        }
      }
      ````````````````````````````````````````````````````````````````````

- Filters AMIs by owner, name pattern, and virtualization type.

-----------------------------------------------------------------------------------------------------------------------------

# 2.Using `terraform_remote_state`
      ````````````````````````````````````````````````````````````````````hcl
      data "terraform_remote_state" "vpc" {
        backend = "s3"
        config = {
          bucket = "my-terraform-state"
          key    = "vpc/terraform.tfstate"
          region = "us-west-2"
        }
      }

      resource "aws_instance" "web_server" {
        ami           = "ami-12345678"
        instance_type = "t2.micro"
        subnet_id     = data.terraform_remote_state.vpc.outputs.subnet_id
      }
      ````````````````````````````````````````````````````````````````````

- Fetches the `subnet_id` from a remote Terraform state file to use in resource creation.
-----------------------------------------------------------------------------------------------------------------------------
_________________________________________________________________________________________________________________________________________________
                                                        Best Practices

1.Minimize Queries: Use `data` blocks only when necessary, as they may increase API calls to providers.
2.Filter Efficiently: Use filters to narrow down results to avoid retrieving large datasets.
3.Combine with Variables: Use input variables to make `data` queries more dynamic and reusable.
4.Version Control: Lock provider versions to ensure compatibility with `data` sources.

_________________________________________________________________________________________________________________________________________________
                                                        Error Handling
Common errors and solutions when using `data` blocks:
1.Data not found:
   - Ensure the data source exists and the filters are correctly specified.
2.Authentication issues:
   - Verify provider authentication (e.g., AWS credentials, Azure access tokens).
3.Unsupported arguments:
   - Check the documentation for the correct syntax and available attributes.

_________________________________________________________________________________________________________________________________________________
                                                           Summary
The `data` block is a powerful tool in Terraform for retrieving existing information without altering infrastructure.

It enhances the flexibility of your configuration by allowing dynamic data usage, making it essential for scalable and modular setups.
_________________________________________________________________________________________________________________________________________________

