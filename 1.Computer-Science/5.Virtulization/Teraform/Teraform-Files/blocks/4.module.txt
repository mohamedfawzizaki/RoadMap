_________________________________________________________________________________________________________________________________________________
                                                      To-Document-Terraform
                                                      =====================

The `module` block in Terraform is used to encapsulate and reuse Terraform configurations.
It allows you to organize your infrastructure as
 reusable components, making your code modular, maintainable, and scalable.
 
Modules can contain resources, variables, outputs, and other modules.

_________________________________________________________________________________________________________________________________________________
                                               Key Features of the `module` Block
 ___________________________________________________________________________________________________________________________
|      Feature        |                                         Description                                                 |
|_____________________|_____________________________________________________________________________________________________|
| Reusability         | Encapsulates infrastructure configurations for reuse across multiple environments or projects.      |
| Organization        | Helps break down large configurations into smaller, more manageable pieces.                         |
| Inputs and Outputs  | Supports passing variables as inputs and returning values as outputs for modular interconnection.   |
| Source Options      | Modules can be sourced from local paths, Git repositories, public Terraform registries, or URLs.    |
|_____________________|_____________________________________________________________________________________________________|

_________________________________________________________________________________________________________________________________________________
                                                 Structure of a `module` Block

# Syntax:
      ````````````````````````````````````````````````````````````````````hcl
      module "<NAME>" {
        source  = "<SOURCE>"
        <ARGUMENTS>
      }
      ````````````````````````````````````````````````````````````````````
 ______________________________________________________________________________________________
|    Component   |                            Description                                      |
|________________|_____________________________________________________________________________|
| `<NAME>`       | Unique name for the module instance within the configuration.               |
| `source`       | Specifies the location of the module code.                                  |
| `<ARGUMENTS>`  | Inputs passed to the module, typically defined as variables in the module.  |
|________________|_____________________________________________________________________________|

_________________________________________________________________________________________________________________________________________________
                                                      Source Options
 _______________________________________________________________________________________________________
|       Source        |                                 Example                                         |
|_____________________|_________________________________________________________________________________|
| Local Path          | `source = "./modules/network"`                                                  |
| Terraform Registry  | `source = "terraform-aws-modules/vpc/aws"`                                      |
| Git Repository      | `source = "git::https://github.com/terraform-aws-modules/terraform-aws-vpc.git"`|
| Remote Archive      | `source = "https://example.com/terraform-aws-vpc.zip"`                          |
|_____________________|_________________________________________________________________________________|

_________________________________________________________________________________________________________________________________________________
                                               Example of a `module` Block
-----------------------------------------------------------------------------------------------------------------------------
# 1.Basic Module Usage
      ````````````````````````````````````````````````````````````````````hcl
      module "vpc" {
        source  = "./modules/vpc"
        cidr    = "10.0.0.0/16"
        azs     = ["us-east-1a", "us-east-1b"]
        private_subnets = ["10.0.1.0/24", "10.0.2.0/24"]
        public_subnets  = ["10.0.101.0/24", "10.0.102.0/24"]
      }
      ````````````````````````````````````````````````````````````````````

- `source`: Points to a local directory containing the module.
- Inputs (`cidr`, `azs`, etc.): Values passed to variables defined in the module.

-----------------------------------------------------------------------------------------------------------------------------

# 2.Using a Module from Terraform Registry
      ````````````````````````````````````````````````````````````````````hcl
      module "s3_bucket" {
        source  = "terraform-aws-modules/s3-bucket/aws"
        version = "3.0.0"

        bucket = "example-bucket"
        acl    = "private"
        tags   = {
          Name        = "My S3 Bucket"
          Environment = "Production"
        }
      }
      ````````````````````````````````````````````````````````````````````

- `source`: Pulls the module from the Terraform Registry.
- `version`: Specifies the module version to use.

-----------------------------------------------------------------------------------------------------------------------------

# 3.Git Repository as Source
      ````````````````````````````````````````````````````````````````````hcl
      module "app_network" {
        source = "git::https://github.com/example/terraform-modules.git//network"

        cidr_block = "192.168.0.0/16"
        region     = "us-west-2"
      }
      ````````````````````````````````````````````````````````````````````

- `source`: Fetches the module from a Git repository.
- `//network`: Specifies the subdirectory containing the module code.

-----------------------------------------------------------------------------------------------------------------------------

# 4.Remote Archive
      ````````````````````````````````````````````````````````````````````hcl
      module "example" {
        source = "https://example.com/modules/example-module.zip"

        instance_type = "t2.micro"
        region        = "us-west-1"
      }
      ````````````````````````````````````````````````````````````````````

- Downloads and uses the module from a remote `.zip` archive.
-----------------------------------------------------------------------------------------------------------------------------
_________________________________________________________________________________________________________________________________________________
                                             Inputs and Outputs in Modules

# Module Variables (Inputs)
Modules accept inputs through variables defined using the `variable` block.

## Example:
      ````````````````````````````````````````````````````````````````````hcl
      # In module: ./modules/vpc/variables.tf
      variable "cidr" {
        type        = string
        description = "The CIDR block for the VPC"
      }

      variable "azs" {
        type        = list(string)
        description = "Availability zones for the VPC"
      }
      ````````````````````````````````````````````````````````````````````

_________________________________________________________________________________________________________________________________________________
                                                     Module Outputs
Modules can expose values using the `output` block.

## Example:
      ````````````````````````````````````````````````````````````````````hcl
      # In module: ./modules/vpc/outputs.tf
      output "vpc_id" {
        description = "The ID of the created VPC"
        value       = aws_vpc.main.id
      }
      ````````````````````````````````````````````````````````````````````

You can reference outputs in your root configuration:
      ````````````````````````````````````````````````````````````````````hcl
      output "vpc_id" {
        value = module.vpc.vpc_id
      }
      ````````````````````````````````````````````````````````````````````

_________________________________________________________________________________________________________________________________________________
                                         Passing Module Outputs to Another Module

You can chain modules by passing outputs as inputs:
      ````````````````````````````````````````````````````````````````````hcl
      module "vpc" {
        source = "./modules/vpc"
        cidr   = "10.0.0.0/16"
      }

      module "subnets" {
        source  = "./modules/subnets"
        vpc_id  = module.vpc.vpc_id
        azs     = ["us-east-1a", "us-east-1b"]
      }
      ````````````````````````````````````````````````````````````````````

_________________________________________________________________________________________________________________________________________________
                                              Best Practices for Modules

1.Use Descriptive Names      : Name modules based on their functionality (e.g., `network`, `security`).
2.Isolate Code               : Each module should serve a single purpose (e.g., VPC creation, IAM roles).
3.Document Inputs and Outputs: Provide descriptions for variables and outputs for clarity.
4.Version Control            : Pin module versions to avoid unintended changes when using remote modules.
5.Reusability                : Design modules with parameterized inputs to make them flexible across different environments.

_________________________________________________________________________________________________________________________________________________
                                               Common Errors and Solutions
 _______________________________________________________________________________________________________________________________________________________________
|          Error                  |                        Cause                                |                       Solution                                |
|_________________________________|_____________________________________________________________|_______________________________________________________________| 
| "Module not found"              | Incorrect `source` path or URL.                             | Verify the path, registry URL, or Git repository.             |
| "Missing required variable"     | Inputs required by the module are not provided.             | Pass the required variables in the `module` block.            |
| "Output not defined in module"  | Attempting to reference an output not defined in the module.| Define the output in the module using the `output` block.     |
| "Unsupported argument"          | Passing an argument not defined as a variable in the module.| Ensure the module's `variables.tf` includes the argument name.|
|_________________________________|_____________________________________________________________|_______________________________________________________________| 

_________________________________________________________________________________________________________________________________________________
                                                          Summary

The `module` block is a core feature in Terraform that supports reusability, maintainability, and scalability.
By organizing configurations into modules, you can create well-structured and
 flexible infrastructure setups that are easier to manage and adapt to changing requirements.
_________________________________________________________________________________________________________________________________________________

