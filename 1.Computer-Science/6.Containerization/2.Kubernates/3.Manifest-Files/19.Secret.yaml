# ======================================================================================
# 📘 Definition: Secret
# --------------------------------------------------------------------------------------
# A Secret in Kubernetes is an object used to store sensitive data, such as passwords,
# OAuth tokens, SSH keys, TLS certs, and Docker credentials. Unlike ConfigMaps, Secrets 
# are base64-encoded and stored separately in etcd with tighter access control.
#
# Key Concepts:
# - Can be consumed by Pods as environment variables or mounted as volumes.
# - Supports different secret types (Opaque, TLS, SSH, Basic Auth, Docker, etc.).
# - Base64-encoding is for transport/storage; it is not encryption.
# - Best practice: Use RBAC, encryption at rest, and limit scope of Secrets.
# ======================================================================================

# ------------------------------------------------------------------------------
# 🔐 Opaque Secret (Generic key-value pairs)
# ------------------------------------------------------------------------------
apiVersion: v1                         # API version for core Kubernetes objects
kind: Secret                           # Declares this resource is a Secret
metadata:
  name: app-secret                     # Unique name for this Secret in the given namespace
  namespace: default                   # Namespace where this Secret is stored
type: Opaque                           # Default secret type for arbitrary key-value pairs
stringData:                            # Accepts plain text, will be base64-encoded automatically
  API_KEY: "my-api-key-123"           # Custom key for storing an API key
  DB_PASSWORD: "super-secret"         # Custom key for storing a database password
---
# ------------------------------------------------------------------------------
# 🔐 Basic Authentication Secret
# ------------------------------------------------------------------------------
apiVersion: v1
kind: Secret
metadata:
  name: basic-auth-secret             # Unique name for the Secret
type: kubernetes.io/basic-auth        # Special secret type for storing basic auth credentials
stringData:
  username: johndoe                   # Username for basic authentication
  password: p@ssw0rd123               # Password for basic authentication
---
# ------------------------------------------------------------------------------
# 🔐 SSH Authentication Secret
# ------------------------------------------------------------------------------
apiVersion: v1
kind: Secret
metadata:
  name: ssh-key-secret                # Unique name for the Secret
type: kubernetes.io/ssh-auth          # Used to store an SSH private key
stringData:
  ssh-privatekey: |                   # Required key name for this type; value is multi-line private key
    -----BEGIN OPENSSH PRIVATE KEY-----
    b3BlbnNzaC1rZX...                # 🔒 Redacted example content of an SSH private key
    -----END OPENSSH PRIVATE KEY-----
---
# ------------------------------------------------------------------------------
# 🔐 TLS Secret (Certificate + Private Key)
# ------------------------------------------------------------------------------
apiVersion: v1
kind: Secret
metadata:
  name: tls-secret                    # Unique name for the Secret
type: kubernetes.io/tls               # Used to store a TLS certificate and private key pair
data:                                 # Requires manually base64-encoded content
  tls.crt: <base64-encoded-cert>      # Base64-encoded X.509 certificate
  tls.key: <base64-encoded-key>       # Base64-encoded private key
# 🔧 Example: To generate via CLI:
# kubectl create secret tls tls-secret \
#   --cert=./tls.crt --key=./tls.key
---
# ------------------------------------------------------------------------------
# 🔐 Docker Registry Secret (Image Pull Credentials)
# ------------------------------------------------------------------------------
apiVersion: v1
kind: Secret
metadata:
  name: regcred                       # Unique name for the Docker credentials Secret
type: kubernetes.io/dockerconfigjson  # Secret type for Docker config JSON
data:
  .dockerconfigjson: <base64-encoded-dockerconfigjson>  # Base64-encoded JSON for Docker auth config
# 🔧 Example: To generate via CLI:
# kubectl create secret docker-registry regcred \
#   --docker-server=registry.example.com \
#   --docker-username=myuser \
#   --docker-password=mypassword \
#   --docker-email=myuser@example.com






















---
apiVersion: v1
kind: Secret
metadata:
  name: my-secret
type: Opaque
data:
  username: YWRtaW4=         # base64 of 'admin'
  password: c2VjcmV0MTIz     # base64 of 'secret123'

# kubectl create secret generic <SECRET_NAME> \
#   [--type=<type>] \
#   [--from-literal=<key>=<value>] \
#   [--from-file[=<key>]=<path>] \
#   [--from-env-file=<envfile>] \
#   [--dry-run=client -o yaml]


# kubectl create secret generic db-creds \
#   --from-literal=username=admin \
#   --from-literal=password=secret123















---
apiVersion: v1
kind: Secret
metadata:
  name: regcred
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: <base64-encoded-json>

# .dockerconfigjson 
# {
#   "auths": {
#     "https://index.docker.io/v1/": {
#       "username": "myusername",
#       "password": "mypassword",
#       "email": "myemail@example.com",
#       "auth": "bXl1c2VybmFtZTpteXBhc3N3b3Jk"  # base64("username:password")
#     }
#   }
# }
# cat ~/.docker/config.json | base64 -w 0
# kubectl apply -f regcred.yaml
# kubectl get secret regcred -o yaml
# Use in Pod/Deployment
# spec:
  # imagePullSecrets:
    # - name: regcred


####
# kubectl create secret docker-registry regcred \
#   --docker-server=https://index.docker.io/v1/ \
#   --docker-username=myusername \
#   --docker-password=mypassword \
#   --docker-email=myemail@example.com
####





########################################################
---
apiVersion: v1
kind: Secret
metadata:
  name: my-tls-secret
type: kubernetes.io/tls
data:
  tls.crt: <base64-encoded-certificate>
  tls.key: <base64-encoded-private-key>


# base64 -w 0 tls.crt > cert.base64
# base64 -w 0 tls.key > key.base64
# kubectl apply -f tls-secret.yaml
# kubectl get secret my-tls-secret
# kubectl describe secret my-tls-secret

# Use It in Ingress
# spec:
  # tls:
  #   - hosts:
  #       - myapp.local
  #     secretName: my-tls-secret

#####
# kubectl create secret tls my-tls-secret \
#   --cert=tls.crt \
#   --key=tls.key
####