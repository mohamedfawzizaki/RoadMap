# ---------------------------------------------------------------------------------------------------------
# EndpointSlice Definition:
# ---------------------------------------------------------------------------------------------------------
# EndpointSlice is a scalable, modern replacement for the legacy Endpoints object in Kubernetes.
# It represents a group of network endpoints (such as Pods) that are associated with a Kubernetes Service.
# Each EndpointSlice contains a set of endpoints and associated metadata such as readiness status, topology,
# and port information. It is automatically managed by the EndpointSlice controller and can support
# features like dual-stack IPs and topology-aware routing.
#
# Introduced in Kubernetes v1.17 (stable since v1.21), EndpointSlices improve scalability
# and observability for large clusters by partitioning endpoint data.
# More Info: https://kubernetes.io/docs/concepts/services-networking/endpoint-slices/
# ---------------------------------------------------------------------------------------------------------

apiVersion: discovery.k8s.io/v1          # API group and version for discovery-related resources
kind: EndpointSlice                      # Defines the object as an EndpointSlice
metadata:
  name: <string>                         # Unique name for this EndpointSlice object (generated by controller)
  namespace: <string>                    # Namespace in which this EndpointSlice resides (same as associated Service)
  labels:
    kubernetes.io/service-name: <service-name>  # Mandatory label linking this slice to its Service

addressType: IPv4                        # Type of addresses contained: IPv4 | IPv6 | FQDN
                                         # This defines how the addresses[] field should be interpreted

ports:                                   # List of all ports that are exposed by the endpoints
  - name: <string>                       # Optional: Named port, useful for multi-port Services (must match Service spec)
    protocol: TCP                        # Protocol used (TCP by default, or UDP/SCTP)
    port: <int32>                        # Numerical port number
    appProtocol: <string>                # Optional: Higher-level protocol hint (e.g., "http", "grpc", "kubernetes.io/ws")

endpoints:                               # Array of endpoint definitions for this slice
  - addresses:
      - <string>                         # IP or FQDN of the endpoint (e.g., "10.244.0.15" or "pod.domain.local")
    conditions:                          # Readiness and lifecycle status of the endpoint
      ready: <boolean>                   # True if the endpoint is ready to receive traffic
      serving: <boolean>                 # (Optional) True if serving requests; useful for terminating pods
      terminating: <boolean>             # (Optional) True if the endpoint is shutting down
    hostname: <string>                   # (Optional) Hostname of the Pod, used for DNS SRV records
    targetRef:                           # (Optional) Reference to the Kubernetes object (typically a Pod)
      kind: Pod                          # Object kind (Pod, Node, etc.)
      namespace: <string>                # Namespace of the referenced object
      name: <string>                     # Name of the referenced object
      uid: <string>                      # Unique ID of the referenced object
      apiVersion: v1                     # API version of the target object
      resourceVersion: <string>          # (Optional) Resource version (used for cache sync and consistency)
    topology:                            # (Optional) Map of topology labels (used for zone/region/node aware routing)
      kubernetes.io/hostname: <string>   # Node name the endpoint is running on (e.g., "node-1")
      topology.kubernetes.io/zone: <string> # Zone info, useful for topology-aware load balancing (e.g., "us-central1-a")

---
apiVersion: discovery.k8s.io/v1
kind: EndpointSlice
metadata:
  name: frontend-webservice-xyz12
  namespace: production
  labels:
    kubernetes.io/service-name: frontend-webservice
addressType: IPv4
ports:
  - name: http
    protocol: TCP
    port: 80
    appProtocol: kubernetes.io/http
  - name: metrics
    protocol: TCP
    port: 9100
    appProtocol: prometheus
endpoints:
  - addresses:
      - 10.244.1.7
    conditions:
      ready: true
      serving: true
      terminating: false
    hostname: frontend-web-7b9f8d6d8-abc12
    targetRef:
      kind: Pod
      namespace: production
      name: frontend-web-7b9f8d6d8-abc12
      uid: d4f1e8f9-2f3a-4b59-b682-0f20b7e1a9f3
      apiVersion: v1
      resourceVersion: "245678"
    topology:
      kubernetes.io/hostname: node-5
      topology.kubernetes.io/zone: us-east1-b
  - addresses:
      - 10.244.2.15
    conditions:
      ready: true
      serving: true
      terminating: false
    hostname: frontend-web-7b9f8d6d8-def34
    targetRef:
      kind: Pod
      namespace: production
      name: frontend-web-7b9f8d6d8-def34
      uid: a9c4f3e2-b1d4-432c-a2a3-9f7e3b2a6d10
      apiVersion: v1
      resourceVersion: "245679"
    topology:
      kubernetes.io/hostname: node-9
      topology.kubernetes.io/zone: us-east1-c
  - addresses:
      - 10.244.3.23
    conditions:
      ready: false                  # Pod not ready yet (e.g., still starting)
      serving: false
      terminating: false
    hostname: frontend-web-7b9f8d6d8-xyz78
    targetRef:
      kind: Pod
      namespace: production
      name: frontend-web-7b9f8d6d8-xyz78
      uid: b4e7d2f3-c9a0-4dc3-84b0-1a34dcd7e123
      apiVersion: v1
      resourceVersion: "245680"
    topology:
      kubernetes.io/hostname: node-7
      topology.kubernetes.io/zone: us-east1-b
# Explanation:
# This EndpointSlice belongs to the Service named frontend-webservice in the production namespace.
# It manages 3 Pods (endpoints):
# Two are ready and serving traffic on IPs 10.244.1.7 and 10.244.2.15.
# One Pod is not ready yet (ready: false), so the service proxy will avoid sending it traffic.
# Two ports are exposed per endpoint:
# HTTP on port 80 (appProtocol: kubernetes.io/http)
# Metrics on port 9100 (appProtocol: prometheus) for scraping by monitoring tools.
# targetRef links back to the specific Pod object, allowing controllers and operators to track the endpoint lifecycle.
# topology shows node hostname and zone, which can be used by advanced load balancers or network policies for topology-aware routing.