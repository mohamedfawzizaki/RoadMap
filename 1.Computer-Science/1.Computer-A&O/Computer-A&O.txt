_________________________________________________________________________________________________________________________________
                                            Computer Architecture & Organization
                                ===========================================================
 Definition:
      -> Computer architecture is the design and organization of a computer's components and systems
         to create a functioning device capable of performing computations and tasks.
      -> It focuses on how the hardware and software interact and includes considerations of performance, 
         efficiency, scalability, and power consumption.
--------------------------------------------------------------------------------------------------------------
Key Components of Computer Architecture:
        1.Central Processing Unit (CPU):
        2.Memory.
        3.Buffers.      
        4.Input/Output Devices.
        5.Storage.
        6.Bus Systems.
_________________________________________________________________________________________________________________________________
                                                        1.CPU:
                                                =====================
Definition:
     The CPU is the brain of the computer, responsible for executing instructions and processing data.
--------------------------------------------------------------------------------------------------------------
Key Components:
    
    Control Unit (CU):
            Directs the operation of the processor.
            Fetches instructions from memory, decodes them, and controls the execution.
            Acts as a traffic manager, directing data flow between the CPU, memory, and I/O devices.
    
    Arithmetic Logic Unit (ALU):
            Performs all arithmetic (e.g., addition, subtraction) and logical (e.g., AND, OR, NOT) operations.
            Operates on data from registers and returns the result to registers.
    
    Registers:
            Small, high-speed storage locations inside the CPU.
            Hold data temporarily for processing.
            Types:
            General-purpose registers: Used during computation.
            Special-purpose registers: Include the program counter (PC), instruction register (IR), and status register.
    
    Clock:
            Synchronizes all operations in the CPU.
            The clock speed (measured in GHz) determines how many cycles the CPU performs per second.
    
    Execution Units:
            In modern CPUs, execution units handle specialized tasks like floating-point operations or vector processing.
_________________________________________________________________________________________________________________________________
Execution Lifecycle:
    Fetch-Decode-Execute Cycle:
            Fetch  :  The CPU fetches an instruction from memory (the address is stored in the Program Counter).
            Decode :  The Control Unit decodes the fetched instruction to understand what operation to perform.
            Execute:  The CPU executes the decoded instruction using the ALU or other parts of the processor.
            Store  :  The result of the execution might be stored back in memory or registers.
    --------------------------------------------------------------------------------------------------------------
    Instruction Set Architecture (ISA):
            Defines the set of instructions a CPU can understand and execute.
            Examples:
                    - x86  (used in Intel and AMD processors).
                    - ARM  (used in smartphones and tablets).
                    - MIPS (used in academic settings).   
_________________________________________________________________________________________________________________________________
Concepts:
    1.Single-Core vs.Multi-Core
        Single-Core:
                A CPU with only one processing unit (core).
                Can execute one instruction at a time.
                Relies heavily on clock speed for performance.
                Example: Older processors like Intel Pentium 4.
        Multi-Core:
                A CPU with multiple cores, each capable of executing instructions independently.
                Enhances performance through parallel execution of tasks.
                Ideal for multitasking and applications that support multi-threading.
                Example: Modern processors like Intel Core i5 (quad-core).
        Key Difference: 
                Single-core has one execution unit, 
                while multi-core has multiple execution units within a single processor.
    --------------------------------------------------------------------------------------------------------------    
    2.Single-Processor vs.Multi-Processors
        Single-Processor:
                A system with only one physical CPU.
                Handles tasks sequentially unless it has multiple cores.
        Multi-Processors:
                A system with multiple physical CPUs, often working in tandem.
                Found in high-performance systems like servers or supercomputers.
                Ideal for workloads requiring extreme parallelism.
        Key Difference: 
                Single-processor systems use one CPU, 
                whereas multi-processor systems have multiple CPUs.
    --------------------------------------------------------------------------------------------------------------
    3.Single-Threading vs.Multi-Threading
        Single-Threading:
                Executes one thread (sequence of instructions) per core at a time.
                Simpler but can underutilize CPU resources.
        Multi-Threading:
                Enables a single core to manage multiple threads.
                Simultaneous Multithreading (SMT), such as Intel's Hyper-Threading, allows better resource utilization.
                Example: A quad-core CPU with SMT might handle 8 threads simultaneously.
        Key Difference: 
                Single-threading handles one thread per core, 
                while multi-threading allows multiple threads per core.
    --------------------------------------------------------------------------------------------------------------
    4.Synchronous vs.Asynchronous
        Synchronous:
                Tasks are executed one at a time in a sequential order.
                The next task waits until the current task is complete.
                Example: Reading a file line-by-line in a blocking manner.
        Asynchronous:
                Tasks execute independently, and the program doesn't wait for one task to finish before starting the next.
                Useful for I/O operations or network requests.
                Example: Non-blocking APIs like JavaScriptâ€™s async/await.
        Key Difference: 
                Synchronous operations are sequential, 
                while asynchronous operations can overlap.
    -------------------------------------------------------------------------------------------------------------- 
    5.Parallelism vs.Concurrency vs.Pipelining
        Parallelism:
                Execution of multiple tasks simultaneously, often on multiple cores or processors.
        Concurrency:
                Execution of multiple tasks, but not necessarily at the same time; tasks are interleaved.
        Pipelining:
                Breaking down a task into smaller, independent stages, 
                 allowing for efficient processing of multiple tasks in a sequence.
        Key Difference:
                Parallelism involves simultaneous execution, 
                concurrency involves interleaved execution, 
                and pipelining involves staged execution
_________________________________________________________________________________________________________________________________
                                                        2.Memory
                                                =======================        
Defifnition:
    -> Memory is the component where data and instructions are stored.
--------------------------------------------------------------------------------------------------------------
Types of Memory:
    
    Primary Memory (RAM):
            Volatile memory that temporarily stores data and instructions.
            Types:
                    DRAM (Dynamic RAM): Needs frequent refreshing.
                    SRAM (Static RAM) : Faster but more expensive.
    -------------------------------------------------------------------------------------------------------------- 
    Cache Memory:
            Small, high-speed memory close to the CPU.
            Stores frequently used data to reduce latency.
            Levels:
                    L1 (smallest, fastest, closest to the CPU).
                    L2 and L3 (larger, slower, farther).
    --------------------------------------------------------------------------------------------------------------
    ROM (Read-Only Memory):
            Non-volatile memory storing firmware and system boot instructions.
            Types: PROM, EPROM, EEPROM.
    --------------------------------------------------------------------------------------------------------------
    Virtual Memory:
            Extends primary memory using storage (e.g., hard drive).
            Allows large programs to run by swapping data between RAM and storage.
    --------------------------------------------------------------------------------------------------------------
    Secondary Memory:
            Non-volatile storage devices like SSDs and HDDs.
            Used for long-term data storage.

_________________________________________________________________________________________________________________________________
                                                        3.Buffers
                                                =======================
Defifnition:
    -> Buffers are temporary storage areas used to handle data transfer mismatches between devices.
--------------------------------------------------------------------------------------------------------------
Purpose:
    Accommodate differences in data transfer rates.
    Prevent data loss during I/O operations.
--------------------------------------------------------------------------------------------------------------
Types:
    Hardware Buffers:
            Located in I/O devices (e.g., printer buffers).
    Software Buffers:
            Implemented in system software for temporary data holding.
--------------------------------------------------------------------------------------------------------------
Example Usage:
    Streaming audio/video where data is buffered before playback.
    Printing where data is stored in a buffer before being sent to the printer.
_________________________________________________________________________________________________________________________________
                                                4.Input/Output Devices
                                                =======================
Defifnition:
    -> I/O devices facilitate communication between the computer and the outside world.
--------------------------------------------------------------------------------------------------------------
Types:
    Input Devices:
            Used to provide data to the computer.
            Examples: Keyboard, mouse, scanner, microphone.
    Output Devices:
            Deliver results from the computer to the user.
            Examples: Monitor, printer, speakers.
    I/O Interfaces:
            Hardware or software mechanisms connecting devices to the system.
            Examples: USB, HDMI, Ethernet.
    Characteristics:
            Speed: Determines the rate of data transfer between I/O devices and the CPU.
            Modes:
                   Programmed I/O            : CPU actively manages data transfer.
                   Interrupt-Driven I/O      : Devices signal the CPU when ready for data exchange.
                   Direct Memory Access (DMA): Transfers data directly between devices and memory, bypassing the CPU.
_________________________________________________________________________________________________________________________________
                                                    5.Storage
                                                =======================
Definition:
    -> Storage refers to data retention capabilities of a system.
--------------------------------------------------------------------------------------------------------------
Types:
    Primary Storage:
            RAM and cache memory for temporary data storage.
    Secondary Storage:
            Long-term data storage.
            Examples: HDD, SSD, optical discs.
    Characteristics:
            SSDs are faster but more expensive than HDDs.
            HDDs provide higher capacity at lower cost.
    Tertiary Storage:
            Used for archiving and backup.
            Examples: Tape drives, cloud storage.
    Volatile vs.Non-Volatile:
            Volatile    : Loses data when power is off (e.g., RAM).
            Non-Volatile: Retains data (e.g., SSD, HDD).

_________________________________________________________________________________________________________________________________
                                                        6.Bus
                                                =======================
Definition:
   -> A bus is a communication system that transfers data between components of a computer.
--------------------------------------------------------------------------------------------------------------
Types of Buses:
    Data Bus:
            Transfers actual data between components.
            Width (e.g., 32-bit, 64-bit) affects performance.
    Address Bus:
            Carries memory addresses specifying data locations.
            Determines the maximum memory capacity the CPU can address.
    Control Bus:
            Sends control signals to coordinate operations (e-.g., read/write signals).
-------------------------------------------------------------------------------------------------------------
Bus Architecture:
    Single Bus:
            Shared by all components; simpler but can become a bottleneck.
    Multiple Bus:
            Separate buses for specific tasks; reduces contention.

_________________________________________________________________________________________________________________________________

-------------------------------------------------------------------------------------------------------------
                                                        1. 32-bit and 64-bit
- 32-bit:
  - Refers to a CPU architecture that processes data in 32-bit chunks.
  - Limited to addressing up to 4 GB of RAM (2^32 memory addresses).
  - Common in older systems and some embedded devices.
  - Examples: Intel 80386, Pentium 4 (in 32-bit mode).

- 64-bit:
  - Refers to a CPU architecture that processes data in 64-bit chunks.
  - Can address significantly more memory (theoretically up to 16 exabytes, though practical limits are much lower).
  - Provides better performance for applications that require large amounts of memory or complex calculations.
  - Examples: Modern CPUs like Intel Core i7, AMD Ryzen, and ARM Cortex-A series.
-------------------------------------------------------------------------------------------------------------
                                                        2. AMD64
- AMD64:
  - A 64-bit instruction set architecture developed by AMD.
  - Also known as x86-64 or x64.
  - Extends the older 32-bit x86 architecture to support 64-bit processing.
  - Backward-compatible with 32-bit x86 software.
  - Widely adopted by Intel and other manufacturers.
  - Used in most modern desktop, laptop, and server processors.
-------------------------------------------------------------------------------------------------------------
                                                        3. x86-64
- x86-64:
  - Another name for the 64-bit extension of the x86 architecture.
  - Essentially the same as AMD64.
  - Commonly used in Intel and AMD processors.
  - Supports both 32-bit and 64-bit operating systems and applications.
-------------------------------------------------------------------------------------------------------------
                                                        4. ARM64 (AArch64)
- ARM64:
  - Refers to the 64-bit version of the ARM architecture.
  - Also known as AArch64.
  - Designed for energy efficiency, making it popular in mobile devices, embedded systems, and increasingly in laptops and servers.
  - Not compatible with x86 or AMD64 architectures.
  - Examples: Apple Silicon (M1, M2), Qualcomm Snapdragon, and ARM Cortex-A series processors.
-------------------------------------------------------------------------------------------------------------
                                                        Key Differences
                        ______________________________________________________________________________________________________
                        | Feature      | 32-bit (x86)       | 64-bit (x86-64/AMD64)               | ARM64 (AArch64)            |
                        |--------------|--------------------|-------------------------------------|----------------------------|
                        | Data Width   | 32-bit             | 64-bit                              | 64-bit                     |
                        |--------------|--------------------|-------------------------------------|----------------------------|
                        | Memory Limit | 4 GB               | 16+ exabytes (theoretical)          | 16+ exabytes (theoretical) |
                        |--------------|--------------------|-------------------------------------|----------------------------|
                        | Compatibility| Older software     | Backward-compatible with 32-bit x86 | Not compatible with x86    |
                        |--------------|--------------------|-------------------------------------|----------------------------|
                        | Use Cases    | Legacy systems, embedded devices | Modern desktops, laptops, servers | Mobile devices, embedded systems, Apple Silicon |
                        |______________|__________________________________|___________________________________|_________________________________________________|

-------------------------------------------------------------------------------------------------------------
                                                        Summary
- 32-bit and 64-bit refer to the width of data a CPU can process.
- AMD64 and x86-64 are essentially the same, referring to the 64-bit extension of the x86 architecture.
- ARM64 (AArch64) is a 64-bit architecture designed by ARM, used in mobile and energy-efficient devices.
_________________________________________________________________________________________________________________________________