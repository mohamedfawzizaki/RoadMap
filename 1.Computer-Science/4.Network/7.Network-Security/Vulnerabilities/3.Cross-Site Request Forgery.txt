_______________________________________________________________________________________________________________________________
                                        Cross-Site Request Forgery (CSRF)   

 1. What is CSRF?
Cross-Site Request Forgery (CSRF) is a web security vulnerability
 where an attacker tricks a victim into performing unwanted actions on a trusted website where the victim is authenticated.

 2. How CSRF Works (Attack Process)
1. Victim logs into a trusted website (e.g., a banking site).
2. Session is maintained via cookies (browser automatically sends cookies with every request).
3. Attacker tricks the victim into clicking a malicious link or loading an image (e.g., in an email, forum, or malicious website).
4. The attacker's request is executed using the victim's session (since cookies are automatically included in cross-site requests).
5. Unwanted action is performed on behalf of the victim (e.g., transferring money, changing passwords, modifying user data).

 3. Example of a CSRF Attack
 Victim's Bank Transfer Form (Vulnerable Code)
`````````````````````````````````````````````````````````````````html
<form action="https://bank.com/transfer" method="POST">
    <input type="hidden" name="account" value="ATTACKER_ACCOUNT">
    <input type="hidden" name="amount" value="5000">
    <input type="submit" value="Transfer Money">
</form>
`````````````````````````````````````````````````````````````````
- If the bank site does not validate CSRF tokens, an attacker can
   embed this form in another site and trick the victim into submitting it.
- The victim‚Äôs browser automatically includes their authentication cookies, 
   making it look like they intended to transfer money.

 Malicious Exploit (Auto-submitting the form)
`````````````````````````````````````````````````````````````````html
<img src="https://bank.com/transfer?account=ATTACKER_ACCOUNT&amount=5000">
`````````````````````````````````````````````````````````````````
- When the victim loads this image (or visits a page with it), the request is sent without the victim noticing.

----------------------------------------------------------------------------------------

 4. How to Prevent CSRF Attacks
 ‚úÖ 1. CSRF Tokens (Best Practice)
- A CSRF token is a unique, random, per-session value that must be included in every sensitive request.
- The server checks if the token matches the session before processing the request.

Laravel Example:
`````````````````````````````````````````````````````````````````php
@csrf  <!-- Generates a hidden CSRF token -->
<input type="hidden" name="_token" value="{{ csrf_token() }}">
`````````````````````````````````````````````````````````````````
Verification in Laravel Middleware (`VerifyCsrfToken.php`)
`````````````````````````````````````````````````````````````````php
public function handle($request, Closure $next)
{
    if ($request->isMethod('POST') && !$this->tokensMatch($request)) {
        abort(419, 'CSRF token mismatch');
    }
    return $next($request);
}
`````````````````````````````````````````````````````````````````
----------------------------------------------------------------------------------------

 ‚úÖ 2. SameSite Cookie Attribute
- Ensures cookies are not sent with cross-site requests.
- Set `SameSite=Strict` or `SameSite=Lax` in the cookie settings.

Laravel (`config/session.php`):
`````````````````````````````````````````````````````````````````php
'same_site' => 'lax',
`````````````````````````````````````````````````````````````````

----------------------------------------------------------------------------------------

 ‚úÖ 3. Use HTTP Referer Header Validation
- Check the `Referer` header to ensure requests are from the same origin.
- Downside: Some browsers strip the `Referer` for privacy reasons.

`````````````````````````````````````````````````````````````````php
if ($_SERVER['HTTP_REFERER'] !== 'https://trusted-site.com') {
    die('Invalid request source');
}
`````````````````````````````````````````````````````````````````

----------------------------------------------------------------------------------------

 ‚úÖ 4. Use Secure Authentication Methods
- Use OAuth, JWT, or API Keys that do not rely on cookies for authentication.
- Example: OAuth Tokens (Require explicit user authorization).

----------------------------------------------------------------------------------------

 ‚úÖ 5. Require Re-authentication for Critical Actions
- Ask for password re-entry before changing sensitive data (like email, password, or bank transfers).

Example:
`````````````````````````````````````````````````````````````````php
if (!Hash::check($request->password, Auth::user()->password)) {
    return back()->withErrors(['password' => 'Incorrect password']);
}
`````````````````````````````````````````````````````````````````

----------------------------------------------------------------------------------------

 5. Difference Between CSRF and XSS
| Feature                                       | CSRF  | XSS |
| Targets User's authentication session         | ‚úÖ    | ‚ùå |
| Involves malicious JavaScript injection       | ‚ùå    | ‚úÖ |
| Requires user interaction (clicking a link)   | ‚úÖ    | ‚ùå |
| Can steal sensitive user data directly        | ‚ùå    | ‚úÖ |

----------------------------------------------------------------------------------------

 6. How to Test for CSRF Vulnerability
 üîç Using Burp Suite
1. Capture a legitimate request (e.g., password change).
2. Remove the CSRF token and replay the request.
3. If the request succeeds ‚Üí Website is vulnerable.

 üîç Using Developer Tools
1. Open DevTools (F12) ‚Üí Network Tab.
2. Check if sensitive POST requests contain CSRF tokens.
3. If missing, the site may be at risk.

----------------------------------------------------------------------------------------

 7. Summary
‚úÖ CSRF exploits session-based authentication (cookies).  
‚úÖ Tokens & SameSite Cookies are the best protection.  
‚úÖ Verify Referer & Re-authentication for sensitive actions.  
‚úÖ Use OAuth, JWT, or API Keys for secure authentication.  
_______________________________________________________________________________________________________________________________
