_______________________________________________________________________________________________________________________________________
                                             HTTP (Hypertext Transfer Protocol) 
                                             ==================================

HTTP (Hypertext Transfer Protocol) is the fundamental protocol used for transmitting data over the World Wide Web (WWW). 

It is an application-layer protocol that facilitates the transfer of
  hypertext documents (web pages) and other resources like images,
   videos, and stylesheets between clients (typically web browsers) and web servers.

HTTP is a request-response protocol, meaning a client sends a request to a server,
 and the server responds with the requested resource or an appropriate error message. 
 
The protocol is based on a client-server architecture where
 clients (such as web browsers or mobile apps) initiate requests and servers process those requests and send back responses.
_______________________________________________________________________________________________________________________________________
                                                   Basic Structure of HTTP

HTTP works by defining specific formats for requests and responses between clients and servers. 

Hereâ€™s how it works:
-------------------------------------------------------------------------------------------------------------------
1. HTTP Request

An HTTP request consists of:
- Request Line: It includes the method, the URL, and the HTTP version.
  - Example: `GET /index.html HTTP/1.1`
  
- Headers: Key-value pairs that provide additional information about the request (such as content type, user agent, etc.).
  - Example: `User-Agent: Mozilla/5.0`
  
- Body: (Optional) Contains data sent by the client, often used with methods like `POST` or `PUT` (e.g., form data).

Example HTTP request:
```
GET /index.html HTTP/1.1
Host: www.example.com
User-Agent: Mozilla/5.0
Accept: text/html
```

-------------------------------------------------------------------------------------------------------------------
2. HTTP Response

An HTTP response consists of:
- Status Line: It includes the HTTP version, status code, and status message (e.g., "200 OK").
  - Example: `HTTP/1.1 200 OK`
  
- Headers: 
   - Similar to request headers, these provide additional information such as
      the type of content being sent, the server type, and cache control.
   - Example: 
            ````````````````````````````````````````
            `Content-Type: text/html; charset=UTF-8`
            ````````````````````````````````````````
  
- Body: (Optional) Contains the content requested by the client (e.g., HTML page, image file, etc.).

Example HTTP response:
            ```````````````````````````````````````
            HTTP/1.1 200 OK
            Content-Type: text/html; charset=UTF-8
            Content-Length: 1234

            <!DOCTYPE html>
            <html>
            <head><title>Welcome</title></head>
            <body><h1>Hello World</h1></body>
            </html>
            ````````````````````````````````````````
-------------------------------------------------------------------------------------------------------------------
_______________________________________________________________________________________________________________________________________
                                                         HTTP Methods

HTTP defines several methods that indicate the desired action to be performed on the resources:

1. GET:
   - Retrieves data from the server.
   - The most commonly used method for requesting resources (e.g., HTML pages, images).
   - It is safe and idempotent, meaning it does not alter the state of the server and can be repeated without side effects.

2. POST:
   - Sends data to the server to create a new resource (e.g., form submissions).
   - It is not idempotent (sending the same data multiple times can result in multiple entries).
   
3. PUT:
   - Sends data to the server to update an existing resource.
   - It is idempotent (repeating the request with the same data will have the same effect).

4. DELETE:
   - Deletes a specified resource from the server.

5. PATCH:
   - Applies partial modifications to a resource (typically used for updating parts of a resource).

6. OPTIONS:
   - Retrieves the supported methods and capabilities of a server or resource.

7. HEAD:
   - Similar to GET, but it only requests the headers, not the body (useful for checking metadata).
_______________________________________________________________________________________________________________________________________
                                                         HTTP Status Codes

The server's response to an HTTP request includes a status code that indicates the outcome of the request. 

These codes are categorized into five classes:

1. 1xx (Informational): Request received, continuing process.
   - Example: `100 Continue`
   
2. 2xx (Successful): The request was successfully processed.
   - Example: `200 OK`, `201 Created`, `204 No Content`
   
3. 3xx (Redirection): Further action is needed to fulfill the request (e.g., redirect to another URL).
   - Example: `301 Moved Permanently`, `302 Found`
   
4. 4xx (Client Error): The request was invalid or cannot be processed due to a client error.
   - Example: `400 Bad Request`, `401 Unauthorized`, `404 Not Found`
   
5. 5xx (Server Error): The server failed to fulfill a valid request.
   - Example: `500 Internal Server Error`, `502 Bad Gateway`, `503 Service Unavailable`
_______________________________________________________________________________________________________________________________________
                                                         HTTP Versions

HTTP has gone through several versions, with each new version improving the protocol's performance, security, and features.

1. HTTP/1.0:
   - The first version of HTTP, it is simple and uses a new TCP connection for each request.
   - Lack of support for persistent connections and pipelining made it inefficient.

2. HTTP/1.1:
   - Introduced in 1997, this is the most widely used version.
   - Supports persistent connections (reusing TCP connections for multiple requests).
   - Introduced chunked transfer encoding for sending responses in parts.
   - Other enhancements like caching, compression, and more granular control over connections.

3. HTTP/2:
   - Introduced in 2015, HTTP/2 focuses on performance improvements.
   - It uses binary framing, which allows multiplexing (multiple requests and responses over the same connection).
   - Header compression reduces overhead.
   - Server push allows servers to send resources proactively before they are requested by the client.

4. HTTP/3:
   - The latest version, still being rolled out (as of 2025), is based on the QUIC protocol, which uses UDP instead of TCP.
   - Reduced latency and improved security.
   - Aims to make connections faster and more reliable, especially in high-latency networks.
_______________________________________________________________________________________________________________________________________
                                                         HTTP Headers

HTTP headers provide metadata that is sent along with the request or response. 

Headers can control how the data is handled, provide information about the client, 
  and dictate how caching and security should be managed.

- Common Request Headers:
  - `User-Agent`  : Identifies the client software making the request (e.g., browser).
  - `Accept`      : Specifies the types of content that the client can process (e.g., `text/html`, `application/json`).
  - `Host`        : Specifies the domain name of the server (essential for virtual hosting).
  - `Authorization: Contains credentials for authentication (e.g., `Bearer <token>`).

- Common Response Headers:
  - `Content-Type`   : Specifies the media type of the response (e.g., `text/html`, `application/json`).
  - `Content-Length` : Indicates the size of the response body.
  - `Cache-Control`  : Directs how and for how long responses should be cached.
  - `Location`       : Used in redirection responses to specify the new URL.
_______________________________________________________________________________________________________________________________________
                                                Security Considerations in HTTP

- HTTP vs HTTPS:
  - HTTPS (Hypertext Transfer Protocol Secure) is the secure version of HTTP,
     using TLS/SSL (Transport Layer Security / Secure Sockets Layer) to encrypt communication between the client and server.
  - It ensures data confidentiality, integrity, and authenticity,
     preventing interception and tampering with data during transmission.
  
- Common Vulnerabilities:
  - Man-in-the-Middle Attacks       : When an attacker intercepts and possibly alters the communication between client and server.
  - Cross-Site Scripting (XSS)      : A vulnerability where malicious scripts are injected into web pages.
  - Cross-Site Request Forgery(CSRF): An attack where unauthorized actions are performed on behalf of the authenticated user.

- Headers for Security:
  - Strict-Transport-Security (HSTS): Enforces the use of HTTPS.
  - Content-Security-Policy   (CSP) : Helps mitigate XSS attacks by specifying trusted sources for content.
_______________________________________________________________________________________________________________________________________
                                                         Conclusion

HTTP is the foundation of data communication on the web, enabling communication between clients and servers. 

By understanding how HTTP works, the various HTTP methods, status codes, headers,
 and versions, developers can build secure, efficient, and reliable web applications. 
 
With the introduction of HTTP/2 and HTTP/3, significant performance improvements have been made,
 particularly for mobile and high-latency networks, while security features
  like HTTPS and modern headers help ensure data privacy and integrity.
_______________________________________________________________________________________________________________________________________


All Headers:
- Accept
- Accept-Charset
- Accept-Encoding