_________________________________________________________________________________________________________________________________
                                              Memory  Management
                                              ------------------
Definition:
       - It is a critical function of an operating system (OS) that
          oversees and optimizes the use of a computerâ€™s primary memory (RAM).
       - It ensures that memory is allocated to processes, managed efficiently, 
          and reclaimed after use to enable multitasking and efficient utilization of system resources.
_________________________________________________________________________________________________________________________________
                                          Key Functions of Memory Management
                                          ----------------------------------
1.Memory Allocation:
       - Allocate memory to processes dynamically when needed and free it after use.
       - Support multitasking by efficiently dividing memory among multiple processes.
--------------------------------------------------------------------------------------------------------------
2.Protection:
       - Prevent a process from accessing memory allocated to another process.
       - Protect the kernel space from user processes.
--------------------------------------------------------------------------------------------------------------
3.Memory Hierarchy Management:
       - Manage different levels of memory, such as registers, cache, RAM, and secondary storage.
--------------------------------------------------------------------------------------------------------------
4.Address Mapping:
       - Convert logical addresses (used by programs) into physical addresses (used by the hardware).
--------------------------------------------------------------------------------------------------------------
5.Swapping and Paging:
       - Move data between RAM and disk storage to handle memory limitations and support virtual memory.
_________________________________________________________________________________________________________________________________
                                             Components of Memory Management
                                             -------------------------------
1.Memory Partitioning:
       - Fixed Partitioning:
         - Memory is divided into fixed-sized partitions.
         - Each process is assigned a partition.
         - Can lead to internal fragmentation (unused memory within partitions).
       - Dynamic Partitioning:
         - Partitions are created dynamically based on process needs.
         - Reduces internal fragmentation but may lead to external fragmentation (scattered free memory blocks).
--------------------------------------------------------------------------------------------------------------
2.Paging:
       - Divides memory into fixed-size blocks called pages (logical memory) and frames (physical memory).
       - A process's memory is stored in non-contiguous frames.
       - Paging eliminates external fragmentation but introduces page table overhead.
--------------------------------------------------------------------------------------------------------------
3.Segmentation:
       - Divides memory into variable-sized segments based on logical divisions, such as functions, arrays, and data.
       - Each segment has a unique segment number and offset.
       - Helps align memory usage with program structure.
--------------------------------------------------------------------------------------------------------------
4.Virtual Memory:
       - A technique that extends the available physical memory by using disk space as swap space.
       - Allows execution of processes larger than available physical memory.
       - Uses page swapping to move inactive pages between RAM and disk.
       - Enhances multitasking but can introduce thrashing if excessive swapping occurs.
--------------------------------------------------------------------------------------------------------------
5.Memory Protection Mechanisms:
       - Base and Limit Registers:
         - Base register : Stores the starting address of a process's memory.
         - Limit register: Defines the size of the memory block.
       - Access Control:
         - Specifies whether memory can be read, written, or executed.
       - Segmentation Faults:
         - Triggered when a process tries to access unauthorized memory.
_________________________________________________________________________________________________________________________________
                                                    Address Space
                                                 -------------------- 
1.Logical Address:
       - Generated by the CPU during program execution.
       - Also called the virtual address.
--------------------------------------------------------------------------------------------------------------
2.Physical Address:
       - The actual location in memory hardware.
       - Managed by the OS and hardware.
--------------------------------------------------------------------------------------------------------------
3.Address Translation:
       - Performed by the Memory Management Unit (MMU).
       - Translates logical addresses to physical addresses.
       - Uses mechanisms like page tables or segment tables.
_________________________________________________________________________________________________________________________________
                                                Techniques for Memory Allocation
                                                --------------------------------
1.Contiguous Memory Allocation:
       - Assigns a single continuous block of memory to each process.
       - Simple but can lead to fragmentation.
--------------------------------------------------------------------------------------------------------------
2.Non-Contiguous Memory Allocation:
       - Divides memory into multiple blocks that can be allocated to processes in non-contiguous locations.
       - Paging and segmentation are examples.
--------------------------------------------------------------------------------------------------------------
3.Dynamic Memory Allocation:
       - Allocates memory during runtime using algorithms like:
         - First Fit: Allocates the first block large enough.
         - Best Fit : Allocates the smallest block large enough.
         - Worst Fit: Allocates the largest available block.
_________________________________________________________________________________________________________________________________
                                                      Paging 
                                                      ------
1.Page Table:
       - Maps logical pages to physical frames.
       - Stored in memory and managed by the OS.
       - Hierarchical Paging:
         - Divides large page tables into multiple levels to save memory.
--------------------------------------------------------------------------------------------------------------
2.Translation Lookaside Buffer (TLB):
       - A hardware cache that stores recently used page table entries.
       - Speeds up address translation by reducing memory access overhead.
--------------------------------------------------------------------------------------------------------------
3.Page Replacement Algorithms:
       - Determine which page to replace when a new page needs to be loaded into memory.
       - Algorithms include:
         - FIFO (First-In, First-Out): Replaces the oldest page.
         - LRU (Least Recently Used): Replaces the least recently used page.
         - Optimal: Replaces the page that will not be used for the longest time (requires future knowledge).
_________________________________________________________________________________________________________________________________
                                                   Segmentation 
                                                   ------------
1.Segment Table:
       - Maps segment numbers to physical addresses.
       - Contains:
         - Base : Starting address of the segment.
         - Limit: Length of the segment.
--------------------------------------------------------------------------------------------------------------
2.Advantages of Segmentation:
       - Matches program structure more closely.
       - Easier to implement protection and sharing.
--------------------------------------------------------------------------------------------------------------
3.Disadvantages of Segmentation:
       - May lead to external fragmentation.
       - Complex address translation.
_________________________________________________________________________________________________________________________________
                                                     Swapping 
                                                   ------------
1.What is Swapping?:
       - Moving an entire process between RAM and disk storage.
       - Allows multiple processes to share limited memory.
--------------------------------------------------------------------------------------------------------------
2.Context Switching:
       - Involves saving and loading process states, including memory content.
--------------------------------------------------------------------------------------------------------------
3.Performance Impacts:
       - Swapping is slower than direct memory access.
       - Excessive swapping can cause thrashing.
_________________________________________________________________________________________________________________________________
                                                   Memory Management
                                                   -----------------
1.Viewing Memory Usage:
       - `free`         : Displays free and used memory.
       - `top` or `htop`: Real-time memory usage by processes.
       - `/proc/meminfo`: Detailed memory statistics.
--------------------------------------------------------------------------------------------------------------
2.Managing Swap Space:
       - `swapon` / `swapoff`: Enable or disable swap space.
       - `mkswap`            : Create a swap space.
--------------------------------------------------------------------------------------------------------------
3.Shared Memory:
       - Managed using system calls like `shmget`, `shmat`, and `shmdt`.
--------------------------------------------------------------------------------------------------------------
4.Virtual Memory Statistics:
       - `/proc/vmstat`: Provides detailed VM statistics.
_________________________________________________________________________________________________________________________________
                                                Challenges in Memory Management
                                                -------------------------------
1.Fragmentation:
       - Internal Fragmentation: Unused memory within allocated blocks.
       - External Fragmentation: Scattered free memory blocks.
--------------------------------------------------------------------------------------------------------------
2.Thrashing:
       - System spends more time swapping pages than executing processes.
       - Mitigated by optimizing page replacement policies or increasing physical memory.
--------------------------------------------------------------------------------------------------------------
3.Balancing Memory Allocation:
       - Allocating too much memory to one process can starve others.
       - Insufficient allocation can lead to frequent page faults.
_______________________________________________________________________________________________________________________________________
_________________________________________________________________________________________________________________________________
                                                Memory Layout of a Process
                                                --------------------------
Definition:
       - The memory layout of a process in a typical operating system 
          is divided into distinct segments, each serving a specific purpose.
          These segments include:

                     1.Text Segment
                     2.Data Segment
                     3.BSS Segment
                     4.Heap
                     5.Stack

       - These segments are laid out in the process's virtual address space, 
          which is managed by the operating system.
--------------------------------------------------------------------------------------------------------------
1.Text Segment

    - Description:
      - Contains the executable instructions of the program (machine code).
      - It is read-only to prevent accidental modification of instructions.

    - Characteristics:
      - Shared among processes executing the same program to save memory.
      - Typically loaded at a fixed location in memory.

    - Example:
      - Functions and methods in the program.
      - Static libraries linked at compile time.
-------------------------------------------------------------------------------------------------------------- 
2.Data Segment

    - Description:
      - Stores initialized global and static variables.
      - These variables have a fixed memory location for the program's lifetime.

    - Characteristics:
      - Divided into read-only and read-write sections.
      - Content is loaded from the executable file when the program starts.

    - Example:
              c
              int globalVar = 42;  // Allocated in the data segment
--------------------------------------------------------------------------------------------------------------  
3.BSS Segment (Block Started by Symbol)

    - Description:
      - Contains uninitialized global and static variables.
      - Occupies no space in the executable file but is initialized to zero at runtime.

    - Characteristics:
      - Reduces the size of the executable.
      - Typically follows the data segment in memory layout.

    - Example:
              c
              static int uninitializedVar;  // Allocated in the BSS segment
--------------------------------------------------------------------------------------------------------------
4.Heap

    - Description:
      - Dynamic memory allocation is managed here (e.g., via `malloc` in C or `new` in C++).
      - Grows upwards in memory as the program allocates more dynamic memory.

    - Characteristics:
      - Memory in the heap must be explicitly allocated and deallocated.
      - Failure to free memory can cause memory leaks.

    - Usage:
              c
              int ptr = malloc(sizeof(int)  10);  // Allocates memory in the heap
              free(ptr);  // Frees allocated memory
--------------------------------------------------------------------------------------------------------------
5.Stack

    - Description:
      - Used for temporary storage of function call information.
      - Stores local variables, function parameters, and return addresses.

    - Characteristics:
      - Grows downwards in memory (toward lower addresses).
      - Automatically managed by the compiler and OS.

    - Structure:
      - Function Call Stack:
        - Each function call pushes a new stack frame.
        - A frame includes local variables, function arguments, and the return address.
      - Frames are popped off when the function call ends.

    - Example:
              c
              void func() {
              int localVar = 5;  // Allocated in the stack
              }
--------------------------------------------------------------------------------------------------------------
                                   Typical Memory Layout of a Process
                 -----------------------------------------------------------------------------
                | Segment    | Purpose                                     | Growth Direction |
                |-----------------------------------------------------------------------------|
                | Text       | Program code (instructions)                 | N/A              |
                | Data       | Initialized global/static variables         | N/A              |
                | BSS        | Uninitialized global/static variables       | N/A              |
                | Heap       | Dynamically allocated memory                | Grows upwards    |
                | Stack      | Function call frames, local variables       | Grows downwards  |
                |-----------------------------------------------------------------------------|
_________________________________________________________________________________________________________________________________
                                             Detailed Example
                                             ----------------
Consider the following C program:
--------------------------------------------------------------
include <stdio.h>
include <stdlib.h>

int globalVar = 10;        // Stored in the data segment
static int staticVar;      // Stored in the BSS segment

void function() {
    int localVar = 20;     // Stored in the stack
    int heapVar = malloc(sizeof(int));  // Allocated in the heap
    heapVar = 30;
    printf("Heap Variable: %d\n", heapVar);
    free(heapVar);         // Deallocate heap memory
}

int main() {
    function();
    return 0;
}
--------------------------------------------------------------


    - Text Segment:
      - Contains machine instructions for `main` and `function`.
    - Data Segment:
      - Holds `globalVar` (initialized to 10).
    - BSS Segment:
      - Holds `staticVar` (uninitialized, defaults to 0).
    - Heap:
      - Allocates memory for `heapVar` during `malloc`.
    - Stack:
      - Temporarily holds `localVar` and function call information.
--------------------------------------------------------------
_________________________________________________________________________________________________________________________________
                                                 Address Space Layout
                                                 --------------------

For a typical process, the memory layout in the virtual address space looks like this:
                      High Memory
                   __________________
                  |      Stack       | Grows downward
                  |                  | 
                  |        â†“         |
                  |                  |
                  |       Heap       | Grows upward
                  |                  | 
                  |  Uninitialized   |
                  |    (BSS)         |
                  |                  |
                  |  Initialized     |
                  |   (Data)         |
                  |                  |
                  |      Text        |
                  |  (Executable)    |
                  |__________________| 
                      Low Memory
_________________________________________________________________________________________________________________________________
                                                Operating System Responsibilities
                                                ---------------------------------
1.Allocation:
       - Dynamically allocate memory for heap and stack.
       - Provide contiguous blocks for data and text segments.
--------------------------------------------------------------
2.Protection:
       - Ensure no process accesses the memory of another process.
       - Prevent writing to the text segment.
--------------------------------------------------------------
3.Swapping:
       - Move memory segments to/from disk when physical memory is limited.
--------------------------------------------------------------
4.Segmentation and Paging:
       - Map virtual addresses to physical memory.
_______________________________________________________________________________________________________________________________________