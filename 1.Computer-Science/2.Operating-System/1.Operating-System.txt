_______________________________________________________________________________________________________________________________________
                                                   Operating System
                                ===========================================================

Definition:
    -> An Operating System (OS) is a software layer 
       that manages hardware resources and provides services to application software. 
    -> It acts as an intermediary between hardware and software, 
       allowing programs to run efficiently while ensuring the system’s stability and security. 
    -> The OS is fundamental to the functioning of any computer system.
_______________________________________________________________________________________________________________________________________
                                            Key Functions of an Operating System
                                            ====================================
1.Process Management: 
    - Processes :  
                -> A process is an instance of a running program. 
                -> The OS manages processes, allocating CPU time and ensuring that they run without interfering with one another.
    - Process Scheduling :  
                -> The OS decides which process gets CPU time based on scheduling algorithms
                   (e.g., Round-Robin, First-Come-First-Served, Priority Scheduling).
    - Multitasking :  
                -> The OS enables multiple processes to run concurrently 
                   by quickly switching between them, giving the illusion that they are running simultaneously.
    - Process States :  
                -> A process can be in various states such as New, Ready, Running, Waiting, and Terminated.
    - Inter-Process Communication (IPC):
                -> Mechanisms like message passing and shared memory allow processes to communicate with each other.
--------------------------------------------------------------------------------------------------------------
2.Memory Management:
    - RAM Allocation:
                -> The OS manages the computer’s primary memory (RAM), 
                   ensuring that each process has the necessary memory to execute.
    - Virtual Memory:
                -> This allows the OS to use a portion of the hard disk as additional RAM,
                   making the system seem to have more memory than physically available.
    - Memory Protection:
                -> Ensures that processes cannot access each other's memory, providing security and stability.
    - Paging and Segmentation:
                -> Techniques used to manage memory, breaking it into smaller, manageable chunks.
--------------------------------------------------------------------------------------------------------------
3.File System Management:
    - File Management:
                -> The OS provides an interface for creating, deleting, reading, and writing files. 
                -> It organizes files in directories (folders).
    - File Permissions:
                -> The OS ensures that only authorized users can access or modify files.
    - Disk Management:
                -> Handles the allocation of storage space on hard drives 
                   and other storage devices, ensuring efficient use of available space.
    - File Systems:
                -> Defines the structure of data storage on a disk (e.g., NTFS, FAT32, ext4).
--------------------------------------------------------------------------------------------------------------
4.Device Management:
    - Device Drivers: 
            -> The OS includes drivers for hardware devices like printers, monitors, keyboards, 
               and network cards to enable communication between the hardware and software.
    - I/O Operations: 
            -> Manages input and output operations, including reading from and writing to peripheral devices. 
            -> The OS provides a standard interface for applications to interact with devices.
    - Device Scheduling: 
            -> The OS allocates devices to processes based on their priority and availability.
--------------------------------------------------------------------------------------------------------------
5.Security and Access Control:
    - Authentication: 
            -> The OS ensures that only authorized users can access the system through login mechanisms like usernames and passwords.
    - Authorization: 
            -> Controls access to system resources based on user permissions and roles.
    - Encryption:
            ->  Protects sensitive data by converting it into unreadable formats, accessible only with the appropriate decryption key.
    - Firewalls and Anti-Virus:
            -> Provides security by detecting and blocking malicious activities, ensuring that the system remains protected from threats.
--------------------------------------------------------------------------------------------------------------
6.User Interface (UI):
    - Command-Line Interface (CLI): 
            -> A text-based interface that allows users to interact with the OS by typing commands.
    - Graphical User Interface (GUI): 
            -> A visual interface that allows users to interact with the OS 
               through graphical elements like icons, buttons, and windows (e.g., Windows, macOS, Linux desktop environments).
    - Shells: 
            -> Programs that provide an interface between the user and the OS, typically through CLI.
_______________________________________________________________________________________________________________________________________
                                              Key Operating System Components
                                            ==================================== 
1.Kernel:
    - The core part of the OS that manages system resources, processes, and hardware. 
    - It operates in **privileged mode** (or **kernel mode**) to access sensitive operations.
    - Types of Kernels:
            - Monolithic Kernel: 
                    -> A large kernel that includes all OS services like memory management,
                       process scheduling, and I/O control (e.g., Linux).
            - Microkernel: 
                    -> A minimalistic kernel that provides only the essential services, 
                       with other services running as user-space processes (e.g., Minix).
            - Hybrid Kernel: 
                    -> Combines aspects of both monolithic and microkernels (e.g., Windows NT, macOS).
--------------------------------------------------------------------------------------------------------------
2.Shell:
    - Provides an interface for user interaction, either through CLI or GUI.
    - In CLI, users type commands which the shell interprets and passes to the OS for execution.
--------------------------------------------------------------------------------------------------------------
3.System Calls:
    - Interfaces that allow user programs to request services from the OS kernel, 
      such as file manipulation, process management, and communication.
--------------------------------------------------------------------------------------------------------------
4.Interrupt Handling:
    - The OS handles interrupts (signals indicating that a process needs immediate attention),
      ensuring that the CPU responds to critical tasks or events.
--------------------------------------------------------------------------------------------------------------
5.Scheduler:
    - Part of the OS responsible for deciding which process should execute next.
    - Types of Schedulers:
            - Long  -Term Scheduler: Decides which processes should be admitted to the ready queue.
            - Short -Term Scheduler: Decides which process gets the CPU next.
            - Medium-Term Scheduler: Manages the swapping of processes in and out of memory.
_______________________________________________________________________________________________________________________________________
                                            Operating System Performance Considerations
                                            =========================================== 
1.Throughput:
    - Measures the number of processes completed in a given time period. 
    - A higher throughput indicates better OS performance.
--------------------------------------------------------------------------------------------------------------
2.Latency:
    - The time it takes for a process to start executing after it’s scheduled.
    - Lower latency is ideal.
--------------------------------------------------------------------------------------------------------------
3.CPU Utilization:
    - The percentage of time the CPU is actively processing tasks. 
    - The OS should strive to keep the CPU as busy as possible without overloading it.
--------------------------------------------------------------------------------------------------------------
4.Fairness:
    - Ensures that all processes are given an equitable share of resources, preventing starvation or monopolization of CPU time.
_______________________________________________________________________________________________________________________________________
                                                Types of Operating Systems
                                            ====================================
 
1.Batch Operating System:
    - Processes are executed in batches without any user interaction.
    - Common in early computing systems, where jobs are collected, processed, and output in bulk.
--------------------------------------------------------------------------------------------------------------
2.Time-Sharing Operating System:
    - Multiple users can interact with the computer at the same time, each having a time slice on the CPU.
    - Example: UNIX, Linux, macOS.
--------------------------------------------------------------------------------------------------------------
3.Real-Time Operating System (RTOS):
    - Provides immediate response to external events.
    - Essential for systems where timing is critical (e.g., embedded systems, aerospace, medical devices).
    - Examples: VxWorks, FreeRTOS.
--------------------------------------------------------------------------------------------------------------
4.Distributed Operating System:
    - Manages a collection of independent computers to appear as a single system to users.
    - Example: Google’s Android OS on smartphones or a distributed file system like Hadoop.
--------------------------------------------------------------------------------------------------------------
5.Network Operating System (NOS):
    - Manages resources on a network, providing network services such as file sharing, communication, and access control.
    - Examples: Windows Server, Novell NetWare.
--------------------------------------------------------------------------------------------------------------
6.Mobile Operating Systems:
    - Designed for mobile devices like smartphones and tablets.
    - Examples: Android, iOS, Windows Phone.
_______________________________________________________________________________________________________________________________________
                                                  Popular Operating Systems
                                            =========================================== 
 _________________________________________________________________________________________________________________________________
|                  |                           |                                                                                  |
|    **OS**        |      **Type**             |                    **Key Features**                                              |
|------------------|---------------------------|----------------------------------------------------------------------------------|
| **Windows**      | Desktop, Server           | User-friendly GUI, wide software compatibility, multitasking, security features. |
| **Linux**        | Desktop, Server, Embedded | Open-source, customizable, stable, widely used in server environments.           |
| **macOS**        | Desktop                   | Built on UNIX, seamless integration with Apple hardware and software.            |
| **Android**      | Mobile                    | Open-source, highly customizable, popular on smartphones.                        |
| **iOS**          | Mobile                    | Secure, user-friendly, and optimized for Apple devices.                          |
| **Unix**         | Desktop, Server           | Multi-user, multi-tasking, command-line interface, widely used in academia.      |
| **FreeBSD**      | Desktop, Server           | Open-source, similar to UNIX, known for performance and security.                |
|__________________|___________________________|__________________________________________________________________________________|
     
_______________________________________________________________________________________________________________________________________